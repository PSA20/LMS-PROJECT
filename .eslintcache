[{"E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\index.js":"1","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\App.js":"2","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\reportWebVitals.js":"3","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\redux\\ConfigureStore.js":"4","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Main.js":"5","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Options.js":"6","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\AddQuestion.js":"7","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Header.js":"8","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\redux\\reducers\\User.js":"9","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\util\\Categories.js":"10","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\redux\\actions\\QuestionActions.js":"11","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\redux\\reducers\\Option.js":"12","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\Select-From-dropdown\\DropDown.js":"13","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\Blanks\\Blanks.js":"14","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\Multiple Choice\\MultipleChoice.js":"15","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\TrueAndFalse\\TrueAndFalse.js":"16","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\redux\\reducers\\Questions.js":"17","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\Blanks\\MakeFillInTheBlanks.js":"18","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\Select-From-dropdown\\MakeDropDown.js":"19","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\TrueAndFalse\\MakeTrueFalse.js":"20","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\Multiple Choice\\MakeMultipleChoice.js":"21","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\util\\colors.js":"22","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\modals\\CustomTime.js":"23","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\modals\\CustomScore.js":"24","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\Select-From-dropdown\\EditDropDown.js":"25","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\Multiple Choice\\EditMultipleChoice.js":"26","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\TrueAndFalse\\EditTrueFalse.js":"27","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\Blanks\\EditFillInTheBlanks.js":"28","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\redux\\types\\OptionTypes.js":"29","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\redux\\types\\Questions.js":"30","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Schemas\\Mcqs.js":"31","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Schemas\\BlanksSchema.js":"32","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\AddQuestionFooter.js":"33","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Test.js":"34","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\Multiple Choice\\MultipleChoiceTest.js":"35","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\Select-From-dropdown\\DropDownTest.js":"36","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\TrueAndFalse\\TrueAndFalseTest.js":"37","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\Blanks\\BlanksTest.js":"38"},{"size":565,"mtime":1610275080185,"results":"39","hashOfConfig":"40"},{"size":660,"mtime":1610380981154,"results":"41","hashOfConfig":"40"},{"size":375,"mtime":1610275080223,"results":"42","hashOfConfig":"40"},{"size":492,"mtime":1610275080185,"results":"43","hashOfConfig":"40"},{"size":6677,"mtime":1610390850335,"results":"44","hashOfConfig":"40"},{"size":5918,"mtime":1610275080170,"results":"45","hashOfConfig":"40"},{"size":4254,"mtime":1610275080170,"results":"46","hashOfConfig":"40"},{"size":1863,"mtime":1610275080170,"results":"47","hashOfConfig":"40"},{"size":81,"mtime":1610275080185,"results":"48","hashOfConfig":"40"},{"size":260,"mtime":1610275080223,"results":"49","hashOfConfig":"40"},{"size":710,"mtime":1610275080185,"results":"50","hashOfConfig":"40"},{"size":466,"mtime":1610275080185,"results":"51","hashOfConfig":"40"},{"size":4247,"mtime":1610275080170,"results":"52","hashOfConfig":"40"},{"size":5086,"mtime":1610275080170,"results":"53","hashOfConfig":"40"},{"size":2579,"mtime":1610390864470,"results":"54","hashOfConfig":"40"},{"size":2052,"mtime":1610275080170,"results":"55","hashOfConfig":"40"},{"size":2760,"mtime":1610275080185,"results":"56","hashOfConfig":"40"},{"size":6957,"mtime":1610275080170,"results":"57","hashOfConfig":"40"},{"size":12725,"mtime":1610275080170,"results":"58","hashOfConfig":"40"},{"size":2989,"mtime":1610275080170,"results":"59","hashOfConfig":"40"},{"size":7434,"mtime":1610275080170,"results":"60","hashOfConfig":"40"},{"size":146,"mtime":1610275080223,"results":"61","hashOfConfig":"40"},{"size":1425,"mtime":1610275080185,"results":"62","hashOfConfig":"40"},{"size":1259,"mtime":1610275080185,"results":"63","hashOfConfig":"40"},{"size":12840,"mtime":1610275080170,"results":"64","hashOfConfig":"40"},{"size":7537,"mtime":1610275080170,"results":"65","hashOfConfig":"40"},{"size":3049,"mtime":1610275080170,"results":"66","hashOfConfig":"40"},{"size":7025,"mtime":1610275080170,"results":"67","hashOfConfig":"40"},{"size":236,"mtime":1610275080223,"results":"68","hashOfConfig":"40"},{"size":360,"mtime":1610275080223,"results":"69","hashOfConfig":"40"},{"size":187,"mtime":1610275080170,"results":"70","hashOfConfig":"40"},{"size":187,"mtime":1610275080170,"results":"71","hashOfConfig":"40"},{"size":852,"mtime":1610275080170,"results":"72","hashOfConfig":"40"},{"size":6159,"mtime":1610392196353,"results":"73","hashOfConfig":"40"},{"size":2282,"mtime":1610392797251,"results":"74","hashOfConfig":"40"},{"size":3869,"mtime":1610392042290,"results":"75","hashOfConfig":"40"},{"size":1654,"mtime":1610392014381,"results":"76","hashOfConfig":"40"},{"size":5265,"mtime":1610398260103,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"y86kga",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"80"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"80"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"80"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"80"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"80"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"80"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"80"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"80"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"80"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"80"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"80"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"80"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"80"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\index.js",[],["168","169"],"E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\App.js",[],"E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\reportWebVitals.js",[],"E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\redux\\ConfigureStore.js",[],"E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Main.js",["170","171","172","173","174"],"E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Options.js",["175","176","177","178","179","180","181","182","183","184","185","186","187"],"import React, { Component } from 'react'\r\nimport {Button, Menu, Dropdown } from \"antd\";\r\nimport CustomTime from \"./modals/CustomTime\";\r\nimport CustomScore from \"./modals/CustomScore\";\r\nimport * as colors from \"../util/colors\";\r\n\r\nexport default class Options extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={ \r\n            ModalTimeVisible: false,\r\n            ModalTimeLoading: false,\r\n            ModalScoreVisible: false,\r\n            ModalScoreLoading: false, \r\n          \r\n            scoreError: false,\r\n            timeError: false,\r\n          \r\n        }\r\n    }\r\n  componentDidMount() {}\r\n  \r\n  showModalTime = () => {\r\n    this.setState({\r\n        ModalTimeVisible: true,\r\n    });\r\n  };\r\n\r\n  handleOk = () => {\r\n    this.setState({ ModalTimeLoading: true });\r\n    setTimeout(() => {\r\n      this.setState({ ModalTimeLoading: false, ModalTimeVisible: false });\r\n    }, 3000);\r\n  };\r\n\r\n  handleCancel = () => {\r\n    this.setState({ ModalTimeVisible: false });\r\n  };\r\n\r\n  \r\n  showModalScore = () => {\r\n    this.setState({\r\n        ModalScoreVisible: true,\r\n    });\r\n  };\r\n\r\n  handleOkScore = () => {\r\n    this.setState({ ModalScoreLoading: true });\r\n    setTimeout(() => {\r\n      this.setState({ ModalScoreLoading: false, ModalScoreVisible: false });\r\n    }, 3000);\r\n  };\r\n\r\n  handleCancelScore = () => {\r\n    this.setState({ ModalScoreVisible: false });\r\n  };\r\n\r\n    ColorMenu =()=> {\r\n        return(\r\n          <Menu>\r\n               <Menu.Item onClick={()=>{this.props.onChangeColor(\"white\");}}>\r\n            <a target=\"_blank\"  rel=\"noopener noreferrer\">\r\n              Default\r\n            </a>\r\n          </Menu.Item>\r\n          <Menu.Item onClick={()=>{this.props.onChangeColor(colors.LIGHTBLUE);}}>\r\n            <a target=\"_blank\" rel=\"noopener noreferrer\" >\r\n              Light Blue\r\n            </a>\r\n          </Menu.Item>\r\n          <Menu.Item onClick={()=>{this.props.onChangeColor(colors.LIGHTYELLOW);}}>\r\n            <a target=\"_blank\" rel=\"noopener noreferrer\">\r\n              Light Yellow\r\n            </a>\r\n          </Menu.Item>\r\n          <Menu.Item onClick={()=>{this.props.onChangeColor(colors.LIGHTGREEN);}}>\r\n            <a target=\"_blank\" rel=\"noopener noreferrer\">\r\n              Light Green\r\n            </a>\r\n          </Menu.Item>\r\n         \r\n        </Menu>\r\n    );}\r\n    ScoreMenu =()=> {\r\n      return(\r\n        <Menu>\r\n             <Menu.Item onClick={()=>{this.props.onChangeScore(1);}}>\r\n          <a target=\"_blank\"  rel=\"noopener noreferrer\">\r\n            1pt\r\n          </a>\r\n        </Menu.Item>\r\n        <Menu.Item onClick={()=>{this.props.onChangeScore(2);}}>\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" >\r\n            2pt\r\n          </a>\r\n        </Menu.Item>\r\n        <Menu.Item onClick={()=>{this.props.onChangeScore(5);}}>\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\">\r\n            5pt\r\n          </a>\r\n        </Menu.Item>\r\n        <Menu.Item onClick={this.showModalScore}>\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\">\r\n            custom\r\n          </a>\r\n        </Menu.Item>\r\n       \r\n      </Menu>\r\n  );}\r\n  TimeMenu =()=> {\r\n      return(\r\n        <Menu>\r\n             <Menu.Item onClick={()=>{this.props.onChangeTime(10);}}>\r\n          <a target=\"_blank\"  rel=\"noopener noreferrer\">\r\n            10 mins\r\n          </a>\r\n        </Menu.Item>\r\n        <Menu.Item onClick={()=>{this.props.onChangeTime(15);}}>\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" >\r\n            15 mins\r\n          </a>\r\n        </Menu.Item>\r\n        <Menu.Item onClick={()=>{this.props.onChangeTime(30);}}>\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\">\r\n            30mins\r\n          </a>\r\n        </Menu.Item>\r\n        <Menu.Item onClick={()=>{this.props.onChangeTime(60);}}>\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\">\r\n            60 mins\r\n          </a>\r\n        </Menu.Item>\r\n        <Menu.Item onClick={()=> {this.showModalTime();}}>\r\n        <a target=\"_blank\"  rel=\"noopener noreferrer\">\r\n            custom\r\n          </a>\r\n        </Menu.Item>\r\n      </Menu>\r\n  );}\r\n\r\n  renderColorName=(color)=>{\r\n    if(color===colors.LIGHTYELLOW){\r\n      return \"Light Yellow\";\r\n    }else if(color===colors.LIGHTGREEN){\r\n      return \"Light Green\";\r\n    }else if(color===colors.LIGHTBLUE){\r\n      return \"Light Blue\";\r\n    }else{\r\n      return \"White\";\r\n    }\r\n  }\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n            <div style={{marginTop: 10}} className=\"col-md-3 offset-md-1  offset-sm-1 col-sm-10 offset-1 col-10\">\r\n            <Dropdown overlay={this.ColorMenu} placement=\"bottomLeft\" arrow>\r\n        <Button block className=\"\">Choose Color : {this.renderColorName(this.props.color)}</Button>\r\n    </Dropdown>\r\n            </div>\r\n\r\n            <div style={{marginTop: 10}} className=\"col-md-3 offset-md-1 offset-sm-1  col-sm-10 offset-1 col-10\">\r\n            <Dropdown overlay={this.ScoreMenu} placement=\"bottomLeft\" arrow>\r\n        <Button  block className=\"\">Choose Score : {this.props.score} pts</Button>\r\n    </Dropdown>\r\n    <CustomScore onChange={this.props.onChangeScore} score={this.props.score} visible={this.state.ModalScoreVisible} loading={this.state.ModalScoreLoading} handleCancel={this.handleCancelScore} handleOk={this.handleOkScore}  />\r\n            </div>\r\n            <div style={{marginTop: 10}} className=\"offset-1 col-10  col-md-3 offset-md-1 offset-sm-1  col-sm-10  \">\r\n            <Dropdown overlay={this.TimeMenu} placement=\"bottomLeft\" arrow>\r\n        <Button  block className=\"\">Choose Time : {this.props.time}</Button>\r\n      \r\n    </Dropdown>\r\n    <CustomTime onChange={this.props.onChangeTime} time={this.props.time} visible={this.state.ModalTimeVisible} loading={this.state.ModalTimeLoading} handleCancel={this.handleCancel} handleOk={this.handleOk}  />\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\AddQuestion.js",[],"E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Header.js",["188","189","190","191","192","193","194","195"],"import React, { Component } from 'react'\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    UncontrolledDropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    NavbarText\r\n  } from 'reactstrap';\r\nexport default class Header extends Component {\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.state={ isOpen: false};\r\n\r\n    }\r\n\r\n     setIsOpen=()=>{\r\n     this.setState({isOpen: !this.state.isOpen})\r\n }\r\n toggle=()=>{\r\n     this.setIsOpen();\r\n } \r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar color=\"light\" fixed=\"top\"  light expand=\"md\">\r\n        <NavbarBrand href=\"/\">DYDQuizMaker</NavbarBrand>\r\n        <NavbarToggler onClick={this.toggle} />\r\n        <Collapse isOpen={this.state.isOpen} navbar>\r\n          {/* <Nav className=\"mr-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink href=\"/components/\">Components</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href=\"https://github.com/reactstrap/reactstrap\">GitHub</NavLink>\r\n            </NavItem>\r\n            <UncontrolledDropdown nav inNavbar>\r\n              <DropdownToggle nav caret>\r\n                Options\r\n              </DropdownToggle>\r\n              <DropdownMenu right>\r\n                <DropdownItem>\r\n                  Option 1\r\n                </DropdownItem>\r\n                <DropdownItem>\r\n                  Option 2\r\n                </DropdownItem>\r\n                <DropdownItem divider />\r\n                <DropdownItem>\r\n                  Reset\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n          </Nav> */}\r\n          {/* <NavbarText>Simple Text</NavbarText> */}\r\n        </Collapse>\r\n      </Navbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\redux\\reducers\\User.js",[],"E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\util\\Categories.js",[],"E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\redux\\actions\\QuestionActions.js",[],"E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\redux\\reducers\\Option.js",[],"E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\Select-From-dropdown\\DropDown.js",["196"],"import React, { Component } from 'react'\r\nimport {Modal, Card, Menu, Dropdown} from \"antd\";\r\nimport { EditTwoTone, DeleteTwoTone} from \"@ant-design/icons\";\r\nimport EditDropDown from \"./EditDropDown\";\r\nexport default class DropDownSelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n         \r\n            visible: false,\r\n          };\r\n    }\r\n    showModal = () => {\r\n      this.setState({ visible: true });\r\n    };\r\n  \r\n    handleOk = () => {\r\n      this.setState({ visible: false });\r\n    };\r\n  \r\n    handleCancel = () => {\r\n      this.setState({ visible: false });\r\n    };\r\n\r\n    onDelete=()=>{\r\n      this.props.deleteQuestion(this.props.data.id);\r\n    }\r\n     isNumeric(str) {\r\n        if (typeof str != \"string\") return false // we only process strings!  \r\n        return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...\r\n               !isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail\r\n      }\r\n\r\n    onRenderDropdownQuestion=(quesNo, data)=> {\r\n        const dataArray = data.description.split(\"Dropdown#\");\r\n        let ansIndex=0;\r\n        return(<p style={{ fontSize: 17}}>{quesNo}. {\"  \"}\r\n            {dataArray.map((item, index)=>{\r\n               // console.log(\"item: \", item);\r\n                if(item.includes(\"#\")){\r\n                    const deepItem=item.split(\"#\");\r\n                    // console.log(\"deepItem: \", deepItem);\r\n                     return deepItem.map((item2)=>{\r\n                        if(this.isNumeric(item2[0])){\r\n                            ansIndex++;\r\n                            let count=ansIndex-1;\r\n                        return(<Dropdown overlay={this.menu(data.options[count], data.ans[count])}>\r\n                            <a className=\"ant-dropdown-link\" onClick={e => e.preventDefault()}>\r\n                              -Select- \r\n                            </a>\r\n                          </Dropdown>);    \r\n                        }\r\n                        if(item2.includes(\"\\n\")){\r\n                            const item3 = item2.split(\"\\n\");\r\n                            return item3.map((i)=>{\r\n                                return(<><br/> {i}</>);\r\n                            })\r\n                        }\r\n                        return item2;\r\n                     })\r\n                    \r\n                }else{\r\n                    return item;\r\n                }\r\n            })}\r\n        </p>);\r\n    }\r\n     menu =(options, ans)=> {\r\n         const optionsArr = options.split(\",\");\r\n            return <Menu>  {optionsArr.map((item,index)=>{\r\n                if(index === ans){\r\n                    return   <Menu.Item key={index} danger>{item}</Menu.Item>;\r\n                }else{\r\n                    return(\r\n                        \r\n                          <Menu.Item key={index}>\r\n                            \r\n                              {item}\r\n                          \r\n                          </Menu.Item>\r\n                        \r\n                        \r\n                      );\r\n                }\r\n            }\r\n            )}</Menu>;\r\n     };\r\n    render() {\r\n        return (\r\n            <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n      <Card\r\n        style={{ backgroundColor: this.props.color }}\r\n        actions={[\r\n          <EditTwoTone\r\n            onClick={() => {\r\n              this.showModal();\r\n            }}\r\n            twoToneColor=\"#52c41a\"\r\n            key=\"edit\"\r\n          />,\r\n          <DeleteTwoTone\r\n            onClick={() => {\r\n              this.onDelete();\r\n            }}\r\n            twoToneColor=\"#eb2f96\"\r\n            key=\"del\"\r\n          />,\r\n        ]}\r\n      >\r\n       {this.onRenderDropdownQuestion(this.props.quesNo, this.props.data)}\r\n      </Card>\r\n      <Modal\r\n        style={{ width: 1000 }}\r\n        title=\"Edit Question\"\r\n        visible={this.state.visible}\r\n        onCancel={() => this.handleCancel()}\r\n        width={1200}\r\n        footer={null}\r\n      >\r\n         <EditDropDown updateQuestion={this.props.updateQuestion} data={this.props.data} handleOk={this.handleOk} handleCancel={this.handleCancel}/> \r\n      </Modal>\r\n    </div>\r\n        )\r\n    }\r\n}\r\n","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\Blanks\\Blanks.js",["197"],"import React, { useState } from \"react\";\r\nimport { Modal, Card } from \"antd\";\r\nimport { DeleteTwoTone, EditTwoTone } from \"@ant-design/icons\";\r\nimport {EditFillInTheBlanks} from \"./EditFillInTheBlanks\";\r\nconst blankString = \"____\";\r\n\r\n\r\nconst myIncludes=(str)=>{\r\n    if(str.includes(\".\")){\r\n        return true;\r\n    }else if(str.includes(\",\")){\r\n        return true;\r\n    }else if(str.includes(\"'\")){\r\n        return true;\r\n    }else if(str.includes(\"\\\"\")){\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const Blanks = (props) => {\r\n // console.log(\"props: \",props.data);\r\n  const [visible, toggleModal] = useState(false);\r\n\r\n  const showModal = () => {\r\n    toggleModal(true);\r\n  };\r\n\r\n  const handleOk = () => {\r\n    toggleModal(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    toggleModal(false);\r\n  };\r\n  const onDelete = () => {\r\n    props.deleteQuestion(props.data.id);\r\n  };\r\n  const makeDescription = (desc) => {\r\n    //console.log(\"ans: \",props.data.ans[0]);\r\n    const array = desc.split(\" \");\r\n    let count = 0;\r\n    const result = array.map((item, index) => {\r\n      // console.log(index);\r\n      if((myIncludes(item)) &&  item.includes(\"____\")){\r\n        console.log(\"found: \", item);\r\n        if (item[item.length - 1] === \".\") {\r\n            \r\n            count=count+1\r\n          return (\r\n            <span style={{ color: \"#1890ff\", textDecoration: \"underline\" }}>\r\n              {props.data.ans[count-1]}\r\n              {\".\"}\r\n              \r\n            </span>\r\n          );\r\n        } else if (item[0] === \".\") {\r\n            console.log(\"found\");\r\n            count=count+1;\r\n            return (\r\n                <span style={{ color: \"#1890ff\", textDecoration: \"underline\" }}>.{\" \"} \r\n                  {props.data.ans[count-1]}\r\n                  \r\n                </span>\r\n              );\r\n        }else if (item[item.length - 1] === \",\") {\r\n            count=count+1;\r\n            return (\r\n              <span style={{ color: \"#1890ff\", textDecoration: \"underline\" }}>\r\n                {props.data.ans[count-1]}\r\n                {\",\"}\r\n                \r\n              </span>\r\n            );\r\n          } else if (item[0] === \",\") {\r\n            count=count+1;\r\n              return (\r\n                  <span style={{ color: \"#1890ff\", textDecoration: \"underline\" }}>,{\" \"} \r\n                    {props.data.ans[count-1]}\r\n                    \r\n                  </span>\r\n                );\r\n          }\r\n          \r\n      }else{ \r\n      if (item === blankString) {\r\n        count=count+1;\r\n        return (\r\n          <span style={{ color: \"#1890ff\", textDecoration: \"underline\" }}>\r\n            {props.data.ans[count-1]}{\" \"}\r\n           \r\n          </span>\r\n        );\r\n      } else if (item !== blankString) {\r\n        return <span>{item} </span>;\r\n      }\r\n    \r\n    }if(item.includes(\".\")){\r\n        count=count+1;\r\n        const arr= item.split(\".\");\r\n        if(arr[0]===blankString){\r\n            return(<>\r\n            <span style={{ color: \"#1890ff\", textDecoration: \"underline\" }}>\r\n            {props.data.ans[count-1]}\r\n            \r\n          </span>. {arr[1]} {\" \"}</>);\r\n        }else{\r\n            return(\r\n            <>{arr[0]}.\r\n            <span style={{ color: \"#1890ff\", textDecoration: \"underline\" }}>\r\n            {props.data.ans[count-1]} {\" \"}\r\n            \r\n          </span>\r\n          </>);\r\n        }\r\n    }\r\n    if(item.includes(\",\")){\r\n        count=count+1;\r\n        const arr= item.split(\",\");\r\n        if(arr[0]===blankString){\r\n            return(<>\r\n            <span style={{ color: \"#1890ff\", textDecoration: \"underline\" }}>\r\n            {props.data.ans[count-1]}\r\n            \r\n          </span>, {arr[1]} {\" \"}</>);\r\n        }else{\r\n            return(\r\n            <>{arr[0]},\r\n            <span style={{ color: \"#1890ff\", textDecoration: \"underline\" }}>\r\n            {props.data.ans[count-1]} {\" \"}\r\n            \r\n          </span>\r\n          </>);\r\n        }\r\n    }\r\n     \r\n    });\r\n\r\n\r\n     //console.log(\"last result\");\r\n    return result;\r\n  };\r\n  return (\r\n    <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n      <Card\r\n        style={{ backgroundColor: props.color }}\r\n        actions={[\r\n          <EditTwoTone\r\n            onClick={() => {\r\n              showModal();\r\n            }}\r\n            twoToneColor=\"#52c41a\"\r\n            key=\"edit\"\r\n          />,\r\n          <DeleteTwoTone\r\n            onClick={() => {\r\n              onDelete();\r\n            }}\r\n            twoToneColor=\"#eb2f96\"\r\n            key=\"del\"\r\n          />,\r\n        ]}\r\n      >\r\n        <p style={{ fontSize: 17 }}>\r\n         \r\n          {props.quesNo}. {makeDescription(props.data.description)}\r\n        </p>\r\n      </Card>\r\n      <Modal\r\n        style={{ width: 1000 }}\r\n        title=\"Edit Question\"\r\n        visible={visible}\r\n        onCancel={() => handleCancel()}\r\n        width={1200}\r\n        footer={null}\r\n      >\r\n         <EditFillInTheBlanks updateQuestion={props.updateQuestion} data={props.data} handleOk={handleOk} handleCancel={handleCancel}/> \r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\Multiple Choice\\MultipleChoice.js",["198"],"E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\TrueAndFalse\\TrueAndFalse.js",[],"E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\redux\\reducers\\Questions.js",["199","200"],"import * as types from \"../types/Questions\";\r\n\r\nexport const Questions = (\r\n  state = {\r\n    questions: [\r\n        {       id:123,\r\n                category: \"Multiple Choice\",\r\n                description: \"How long one-one meeting with the subordinate last.\",\r\n                options: [\"5 mins\", \"10 mins\", \"15 mins\"],\r\n                ans: [\"5 mins\"],\r\n              }, {       id:126,\r\n                category: \"Fill in the Blanks\",\r\n                description: \"____ of America is ____ .but ____ is the capital of Australia\",\r\n                options: [],\r\n                ans: [\"Capital\",\"New York\", \"Sydney\"],\r\n              }, {       id:16,\r\n                category: \"Select From Dropdown\",\r\n                description: \"Islamabad is the capital of  #1 Dropdown#. China is her  #2 Dropdown#\",\r\n                options: [\"Pakistan,India\",\"bestfriend,enemy\"],\r\n                ans: [0,0],\r\n              },{       id:166,\r\n                category: \"True and False\",\r\n                description: \"Is Trump President of America.\",\r\n                options: [],\r\n                ans: [false],\r\n              },\r\n              \r\n    ],color: \"white\",score:1,time:60\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case types.ADD_QUESTION:\r\n       action.payload.id= action.payload.ans[0];\r\n      return { ...state, questions: state.questions.concat(action.payload) };\r\n    case types.DELETE_QUESTION:\r\n        const newArray= state.questions.filter(item=>{return item.id!==action.payload});\r\n        return { ...state, questions: newArray};\r\n     case types.CHANGE_COLOR:\r\n         return { ...state, color: action.payload} \r\n         case types.CHANGE_SCORE:\r\n            return { ...state, score: action.payload}\r\n            case types.CHANGE_TIME:\r\n            return { ...state, time: action.payload}   \r\n        case types.UPDATE_QUESTION:\r\n            const question=action.payload;\r\n           // console.log(\"question: \",question);\r\n            const id= question.id;\r\n          //  console.log(\"id: \",id);\r\n            var foundIndex = state.questions.findIndex(x => x.id == id);\r\n           // console.log(\"found index: \",foundIndex);\r\n            state.questions[foundIndex]=question;\r\n            //console.log(\"state: \",state);\r\n            return { ...state, questions: state.questions}        \r\n\r\n  }\r\n  return state;\r\n};\r\n// {\r\n//     category: \"Multiple Choice\",\r\n//     description: \"How long one-one meeting with the subordinate last.\",\r\n//     options: [\"5 mins\", \"10 mins\", \"15 mins\"],\r\n//     ans: \"5 mins\",\r\n//   },\r\n//   {\r\n//     category: \"Multiple Choice\",\r\n//     description: \"How long one-one meeting with the subordinate last.\",\r\n//     options: [\"5 mins\", \"10 mins\", \"15 mins\"],\r\n//     ans: \"5 mins\",\r\n//   },","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\Blanks\\MakeFillInTheBlanks.js",["201"],"import React, {useState} from 'react'\r\nimport {Button, Divider, Input} from \"antd\";\r\nimport {DeleteTwoTone} from \"@ant-design/icons\";\r\nimport Joi from \"joi-browser\";\r\nimport \"./Blanks.css\";\r\nimport * as Schemas from \"../../Schemas/BlanksSchema\";\r\nconst errorStyleText = {\r\n    color: \"#eb2f96\",\r\n  };\r\n  const { TextArea } = Input;\r\n  const blankString=\"____\";\r\nexport  const MakeFillInTheBlanks = (props) => {\r\n    const [question, setQuestion] = useState({\r\n       \r\n        category: \"Fill in the Blanks\",\r\n        description: \"\",\r\n        options: [],\r\n        ans: [],\r\n        \r\n        descriptionError: \"\",\r\n        blankValue: \"\",\r\n        bankValueError: \"\",\r\n    });\r\n    const deleteBlankInDescription=(index)=>{\r\n      console.log(\"index: \", index)\r\n      let desc=question.description;\r\n      const arr = desc.split(\"\");\r\n      let newArr=[];\r\n      let count=0;\r\n      let dashcount=0;\r\n      arr.forEach((item)=>{\r\n     \r\n        if(item === \"_\"){\r\n          console.log(\"dash\");\r\n          if(index===count){\r\n           \r\n\r\n          }else{\r\n            dashcount++;\r\n            newArr.push(item);\r\n           \r\n          }\r\n            \r\n\r\n        }else{\r\n          if(dashcount===4){\r\n            count++;\r\n            dashcount=0;\r\n          }\r\n        \r\n          newArr.push(item);\r\n        }\r\n      });\r\n     \r\n    \r\n      const newDesc= newArr.join(\"\");\r\n      return newDesc;\r\n    };\r\n   const onDelete = (option, i) => {\r\n        let options = question.options;\r\n        const index = options.indexOf(option);\r\n        if (index > -1) {\r\n          options.splice(index, 1);\r\n        }\r\n       const desc= deleteBlankInDescription(i);\r\n       \r\n        setQuestion({ ...question,options: options, description: desc });\r\n      };\r\n      const onBlankValueChange=(e,index)=>{\r\n        const value = e.target.value;\r\n        let questionOption = question.options;\r\n        questionOption[index]= value;\r\n        setQuestion({ ...question,options: questionOption});\r\n\r\n    };\r\n    const renderOptions = () => {\r\n  \r\n      const {options}= question;\r\n        \r\n        return options.map((item, index) => {\r\n          return (\r\n            <div style={{ marginTop: 7 }} id={item} className=\"row\">\r\n              <div className=\"col-5 col-sm-5 offset-sm-1\">\r\n               <Input onChange={(e)=>{onBlankValueChange(e,index);}} value={item}/>\r\n              </div>\r\n              <div className=\"col-2 col-sm-1 \">\r\n                <Button onClick={() => onDelete(item, index)}>\r\n                  {\" \"}\r\n                  <span>\r\n                    <DeleteTwoTone twoToneColor=\"#eb2f96\" />\r\n                  </span>\r\n                </Button>\r\n              </div>\r\n              {/* <div className=\"col-2 col-sm-1 \">\r\n           \r\n             <Button> <span><EditTwoTone twoToneColor=\"#52c41a\" /></span></Button>\r\n         \r\n            </div> */}\r\n            </div>\r\n          );\r\n        });\r\n      };\r\n  \r\nconst         onAddBlank=()=>{\r\n    if(question.blankValue){\r\n        const found = question.options.some(\r\n            (item) => item.toUpperCase() == question.blankValue.toUpperCase()\r\n          );\r\n          if (!found) {\r\n              let updateDesc= question.description;\r\n              \r\n              updateDesc= updateDesc.concat(blankString);\r\n\r\n            setQuestion({ ...question,options:question.options.concat(question.blankValue),blankValueError: \"\", description: updateDesc});\r\n\r\n          } else {\r\n              setQuestion({ ...question, blankValueError: \"Already exists\"})\r\n            \r\n          }\r\n    }else{\r\n        setQuestion({ ...question, blankValueError: \"Please enter Value and then Press Button !\"})\r\n    }\r\n};\r\n\r\n\r\nconst onAddQuestion = () => {\r\n    if (question.options.length > 0) {\r\n      // options are present\r\n      const result = Joi.validate(\r\n        { description: question.description },\r\n        Schemas.description\r\n      );\r\n      if (result.error) {\r\n        setQuestion({ ...question,\r\n          descriptionError: result.error.details[0].message,\r\n          optionsError: \"\",\r\n        });\r\n      } else {\r\n        setQuestion({  ...question, descriptionError: \"\", optionsError: \"\" });\r\n        \r\n          //      ADD to DATABASE\r\n          // Closing modal\r\n          const ans=question.options;\r\n         \r\n          const data={category: \"Fill in the Blanks\", description: question.description, options: [], ans: ans};\r\n          props.addQuestion(data);\r\n          props.handleOk();\r\n    \r\n\r\n        \r\n      }\r\n    } else {\r\n      // options error : no option present\r\n      setQuestion({ ...question, optionsError: \"Please add atleast one option\" });\r\n    }\r\n  };\r\n \r\n    return (\r\n        <>\r\n        <div className=\"row no-gutters\">\r\n          <div  className=\"col-12 col-sm-7 offset-sm-1 bankValueStyle\">\r\n            <Input\r\n              placeholder=\"Enter Blank Value Here\"\r\n              value={question.blankValue}\r\n              onChange={(e) => {\r\n                setQuestion({ ...question,blankValue: e.target.value});\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"col-12 col-sm-3 \">\r\n            <Button\r\n              className=\"add-blank\"\r\n              style={{ marginLeft: 0 }}\r\n              block\r\n              type=\"primary\"\r\n              success\r\n              onClick={()=>{onAddBlank();}}\r\n            >\r\n              {\" \"}\r\n              Add Blank\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n            <p style={errorStyleText}>{question.blankValueError}</p>\r\n          </div>\r\n        </div>\r\n        <br/>\r\n         <div className=\"row\">\r\n          <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n            <TextArea\r\n              placeholder=\"Enter Your Question\"\r\n              value={question.description}\r\n              onChange={(e)=>setQuestion({...question,description: e.target.value})}\r\n              rows={4}\r\n            />\r\n          </div>\r\n        </div>\r\n        <br/>\r\n        {renderOptions()}\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n            <p style={errorStyleText}>{question.descriptionError}</p>\r\n          </div>\r\n        </div>\r\n        <Divider />\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-sm-2 offset-sm-7\">\r\n            <Button block\r\n              onClick={() => {\r\n                props.handleCancel();\r\n              }}\r\n              style={{marginTop: 7}}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n          <div className=\"col-12 col-sm-3 \">\r\n            <Button block\r\n              onClick={() => {\r\n                onAddQuestion();\r\n              }}\r\n              type=\"primary\"\r\n              style={{marginTop: 7}}\r\n            >\r\n              Add Question\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\Select-From-dropdown\\MakeDropDown.js",["202","203","204"],"import React, { Component } from \"react\";\r\nimport AddQuestionFooter from \"../../AddQuestionFooter\";\r\nimport { Button, Input, Checkbox } from \"antd\";\r\nimport {\r\n  CloseCircleTwoTone,\r\n  PlusOutlined,\r\n  DeleteTwoTone,\r\n} from \"@ant-design/icons\";\r\nimport \"./Styles.css\";\r\nimport { ERROR_COLOR } from \"../../../util/colors\";\r\nimport * as CategoryTypes from \"../../../util/Categories\";\r\nconst { TextArea } = Input;\r\nexport default class MakeDropDown extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      description: \"\",\r\n      options: [],\r\n      addOptionFields: [],\r\n      addOptionFieldsError: [],\r\n\r\n      ans: [],\r\n\r\n      ansError: \"\",\r\n      descriptionError: \"\",\r\n    };\r\n  }\r\n\r\n  onAddQuestion = () => {\r\n      if(this.state.description.length === 0){\r\n          this.setState({descriptionError: \"Description cannot be Empty!\"});\r\n      }else{\r\n        var temp = this.state.description;\r\n        var dropdownCount = (temp.match(/Dropdown/g) || []).length;\r\n        var optionCount= this.state.options.length;\r\n        if(dropdownCount > optionCount){\r\n            this.setState({descriptionError: \"Count of Dropdown is not equal\"});\r\n        }else if(dropdownCount === optionCount){\r\n          if(optionCount>0){\r\n            const data={category: CategoryTypes.SELECT_FROM_DROPDOWN, description: this.state.description, options: this.state.options, ans: this.state.ans};\r\n           // console.log(\"data: \", data);\r\n            this.props.addQuestion(data);\r\n            this.props.handleOk();\r\n          }else{\r\n            this.setState({descriptionError: \"Add atleast one Dropdown\"});\r\n          }\r\n        }\r\n        else{\r\n            this.setState({descriptionError: \"Count of Dropdown is not equal\"});\r\n        }\r\n      }\r\n    \r\n  };\r\n  onChangeDescription = (e) => {\r\n    let value = e.target.value;\r\n    if (e.key === 'Enter') {\r\n     // console.log('do validate');\r\n    \r\n      value= value + \"\\n\";\r\n      //console.log(\"value: \",value);\r\n      this.setState({ description: value });\r\n    }\r\n    console.log(value);\r\n    this.setState({ description: value });\r\n  };\r\n  onEnterOptionValue = (index, e) => {\r\n    const value = e.target.value;\r\n    let newArr = this.state.addOptionFields.splice();\r\n    newArr[index] = value;\r\n    this.setState({ addOptionFields: newArr });\r\n  };\r\n  onOptionChangeValue = (e, index, optionIndex) => {\r\n    const value = e.target.value;\r\n    let optionArray = this.state.options[index].split(\",\");\r\n    optionArray[optionIndex] = value;\r\n    let newOptionArray = optionArray.join(\",\");\r\n    optionArray = this.state.options;\r\n    optionArray[index] = newOptionArray;\r\n    this.setState({ options: optionArray });\r\n  };\r\n  onDeleteOptionValue = (index, optionIndex) => {\r\n    let optionValue = this.state.options[index].split(\",\");\r\n    let del = optionValue.splice(optionIndex, 1);\r\n    let options = this.state.options;\r\n    if (optionIndex === this.state.ans[index]) {\r\n      //if we remove checked then make ans 0 index\r\n      let ans = this.state.ans;\r\n      ans[index] = 0;\r\n      this.setState({ ans });\r\n    }\r\n\r\n    if (optionIndex < this.state.ans[index]) {\r\n      let ans = this.state.ans;\r\n      let ansValue = this.state.ans[index];\r\n      // console.log(\"ans value: \", ansValue);\r\n      ans[index] = ansValue - 1;\r\n      this.setState({ ans });\r\n    }\r\n    const newOptionValue = optionValue.join(\",\");\r\n    options[index] = newOptionValue;\r\n    this.setState({ options: options });\r\n  };\r\n  onChangeCheckedOptionValue = (index, optionIndex) => {\r\n    let ans = this.state.ans;\r\n    ans[index] = optionIndex;\r\n    this.setState({ ans: ans });\r\n  };\r\n  onAddOptionValueBtn = (index) => {\r\n    const value = this.state.addOptionFields[index];\r\n    let addOptionFields = this.state.addOptionFields;\r\n    //addOptionFields--->index\r\n\r\n    //if emty display errors\r\n\r\n    if (value.length === 0) {\r\n      let err = \"Please Enter Value and then Add\";\r\n      let addOptionFieldsError = this.state.addOptionFieldsError;\r\n      addOptionFieldsError[index] = err;\r\n      this.setState({ addOptionFieldsError });\r\n      setTimeout(() => {\r\n        addOptionFieldsError = this.state.addOptionFieldsError;\r\n        addOptionFieldsError[index] = \"\";\r\n        this.setState({ addOptionFieldsError });\r\n      }, 2000);\r\n    } else {\r\n      //check if same exists\r\n      let optionsValue = this.state.options[index].split(\",\");\r\n      if (optionsValue.includes(value)) {\r\n        let err = \"Already Exists\";\r\n        let addOptionFieldsError = this.state.addOptionFieldsError;\r\n        addOptionFieldsError[index] = err;\r\n        this.setState({ addOptionFieldsError });\r\n        setTimeout(() => {\r\n          addOptionFieldsError = this.state.addOptionFieldsError;\r\n          addOptionFieldsError[index] = \"\";\r\n          this.setState({ addOptionFieldsError });\r\n        }, 2000);\r\n      } else {\r\n          if(optionsValue[0]===\"\"){\r\n              optionsValue[0]=value;\r\n              const newOptionsValue = optionsValue.join(\",\");\r\n        const options = this.state.options;\r\n        options[index] = newOptionsValue;\r\n\r\n        addOptionFields[index]=\"\";\r\n        this.setState({ options, addOptionFields });\r\n          }else{\r\n        optionsValue.push(value);\r\n        const newOptionsValue = optionsValue.join(\",\");\r\n        const options = this.state.options;\r\n        options[index] = newOptionsValue;\r\n\r\n        addOptionFields[index]=\"\";\r\n        this.setState({ options, addOptionFields });\r\n        // adding to options //\r\n          }\r\n      }\r\n    }\r\n  };\r\n\r\n  onDeleteDropDown = (index) => {\r\n    let { ans, options, addOptionFields, addOptionFieldsError, description} = this.state;\r\n    ans.splice(index,1);\r\n   \r\n    options.splice(index,1);\r\n    addOptionFields.splice(index,1);\r\n    addOptionFieldsError.splice(index,1);\r\n    const str= \"#\"+(index+1)+\" Dropdown#\";\r\n    const newDesc=description.split(str).join(\"\");\r\n    let count=1; let first=true; let skip=false;\r\n    let finalDesc=newDesc.split(\"Dropdown#\");\r\n    let Desc=[];\r\n  //  console.log(\"newDesc: \", newDesc);\r\n    //console.log(\"finaldescBefore: \", finalDesc);//\r\n    finalDesc.forEach((item,index)=>{\r\n      \r\n         const length= item.length;\r\n       \r\n         if(item.length>1){\r\n             let n=length-3;\r\n            \r\n             if(item[n]===\"#\"){\r\n                 n++;\r\n                 let str=item.split(\"\");\r\n                 str[n]=count+\"\";\r\n                 let newStr=str.join(\"\");\r\n                 count++;\r\n                // console.log(\"str: \", newStr);\r\n                 Desc.push(newStr);\r\n            \r\n             }else{\r\n               // console.log(\"item: \", item);\r\n                Desc.push(item);\r\n             }\r\n\r\n         }else{\r\n          //  console.log(\"item: \", item);\r\n            Desc.push(item);\r\n         }\r\n  \r\n    });\r\n \r\n    let finaldescription= Desc.join(\"Dropdown#\");\r\n    if(Desc.length===1){\r\n        var c = (finaldescription.match(/Dropdown/g) || []).length;\r\n        var f = (finaldescription.match(/#/g) || []).length;\r\n        if(c===0 && f===1){\r\n        finaldescription=finaldescription+\"Dropdown#\";}\r\n    }\r\n  \r\n    this.setState({ans, options, addOptionFields, addOptionFieldsError, description: finaldescription});\r\n  }\r\n\r\n  onAddDropdown = () => {\r\n        let {description, ans, options, addOptionFields, addOptionFieldsError} = this.state;\r\n        let length = this.state.options.length;\r\n        description = description + \" #\"+(length+1)+\" Dropdown#\";\r\n        ans[length]=0;\r\n        options[length]=\"\";\r\n        addOptionFields[length]=\"\";\r\n        addOptionFieldsError[length]=\"\";\r\n        this.setState({description, ans, options, addOptionFields, addOptionFieldsError});\r\n  }\r\n\r\n  renderAddDropdownSection = (item, index) => {\r\n    const optionArray = item.split(\",\"); //1,2,3\r\n    return (\r\n      <div style={{textAlign: \"center\"}} className=\"col-11 col-sm-4 offset-sm-1 dropdown-container-style\">\r\n        <div id=\"box\">\r\n          <Button onClick={()=>{this.onDeleteDropDown(index);}} type=\"text\" id=\"icon-delete-dropdown\">\r\n            <span>\r\n              <CloseCircleTwoTone\r\n                style={{ fontSize: 20 }}\r\n                twoToneColor=\"#eb2f96\"\r\n              />\r\n            </span>\r\n          </Button>\r\n        </div>\r\n        {/* input field and add button */}\r\n        <h5 style={{margin : 7}}>Dropdown #{index+1}</h5>\r\n        <div\r\n          style={{ marginTop: 10 }}\r\n          className=\"row no-gutters enter-option-value-container\"\r\n        >\r\n          <div className=\"enter-option-value-input\">\r\n            <Input\r\n              value={this.state.addOptionFields[index]}\r\n              onChange={(e) => this.onEnterOptionValue(index, e)}\r\n              placeholder=\"Enter Option Value to Add\"\r\n            />\r\n          </div>\r\n          <div className=\"enter-option-value-add-btn\">\r\n            <Button\r\n              onClick={() => {\r\n                this.onAddOptionValueBtn(index);\r\n              }}\r\n              type=\"primary\"\r\n            >\r\n              <span>\r\n                <PlusOutlined\r\n                  style={{\r\n                    color: \"white\",\r\n                    verticalAlign: \"baseline\",\r\n                    fontSize: 18,\r\n                  }}\r\n                />\r\n              </span>\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        {/* error row */}\r\n        <div className=\"row no-gutters\">\r\n          <p style={{ color: ERROR_COLOR }}>\r\n            {this.state.addOptionFieldsError[index]}\r\n          </p>\r\n        </div>\r\n        {/* List of options */}\r\n\r\n        {this.state.options[index] !== \"\"\r\n          ? optionArray.map((item, optionIndex) => {\r\n              let checked = false;\r\n              if (optionIndex === this.state.ans[0]) {\r\n                checked = true;\r\n              }\r\n              return (\r\n                <div className=\"row \">\r\n                  <div className=\"checkbox-div\">\r\n                    <Button type=\"text\">\r\n                      <Checkbox\r\n                        checked={checked}\r\n                        onChange={(e) => {\r\n                          this.onChangeCheckedOptionValue(index, optionIndex);\r\n                        }}\r\n                      />\r\n                    </Button>\r\n                  </div>\r\n                  <div className=\"option-value-div\">\r\n                    <Input\r\n                      value={item}\r\n                      onChange={(e) => {\r\n                        this.onOptionChangeValue(e, index, optionIndex);\r\n                      }}\r\n                      placeholder=\"Option Value\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"option-value-delete-div\">\r\n                    <Button\r\n                      onClick={() => {\r\n                        this.onDeleteOptionValue(index, optionIndex);\r\n                      }}\r\n                    >\r\n                      <span>\r\n                        <DeleteTwoTone\r\n                          twoToneColor=\"#eb2f96\"\r\n                          style={{ verticalAlign: \"baseline\" }}\r\n                        />{\" \"}\r\n                      </span>\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          : null}\r\n      </div>\r\n    );\r\n  };\r\n  render() {\r\n    // console.log(this.state.ans);\r\n    return (\r\n      <>\r\n        <div>\r\n          {/* <h1>Select from Dropdown</h1> */}\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n            <TextArea\r\n              placeholder=\"Enter Your Question\"\r\n              value={this.state.description}\r\n              onChange={this.onChangeDescription}\r\n              rows={4}\r\n            />\r\n          </div>\r\n          <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n            <p style={{ color: ERROR_COLOR }}>\r\n                {this.state.descriptionError}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n            <div  className=\"col-12 col-sm-10 offset-sm-1\">\r\n                <div >\r\n                <Button onClick={()=>this.onAddDropdown()} type=\"primary\" style={{position: \"absolute\", right :13}}>Add Dropdown</Button>\r\n                </div>\r\n                \r\n            </div>\r\n        </div>\r\n        <br/><br/>\r\n        <div className=\"row\">\r\n          {this.state.options.map((item, index) => {\r\n            return <>{this.renderAddDropdownSection(item, index)}</>;\r\n          })}\r\n        </div>\r\n        <AddQuestionFooter\r\n        type= \"Add Question\"\r\n          handleCancel={this.props.handleCancel}\r\n          handleOk={this.onAddQuestion}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\TrueAndFalse\\MakeTrueFalse.js",[],"E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\Multiple Choice\\MakeMultipleChoice.js",["205","206","207"],"import React, { Component } from \"react\";\r\nimport { Input,  Button, Radio, Divider } from \"antd\";\r\nimport { DeleteTwoTone } from \"@ant-design/icons\";\r\nimport Joi from \"joi-browser\";\r\nimport * as Schemas from \"../../Schemas/Mcqs\";\r\nimport \"./MakeMultipleChoice.css\";\r\nconst { TextArea } = Input;\r\n\r\nconst errorStyleText = {\r\n  color: \"#eb2f96\",\r\n};\r\nexport default class MakeMultipleChoice extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      description: \"\",\r\n      descriptionError: \"\",\r\n      optionValue: \"\",\r\n      optionValueError: \"\",\r\n      options: [],\r\n      optionsError: \"\",\r\n      value: 0,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    \r\n  }\r\n\r\n  onChange = (e) => {\r\n    // console.log(\"radio checked\", e.target.value);\r\n    this.setState({\r\n      value: e.target.value,\r\n    });\r\n  };\r\n  onFinish = (values) => {\r\n    console.log(\"Success:\", values);\r\n  };\r\n\r\n  onFinishFailed = (errorInfo) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  onChangeOptionField = (val) => {\r\n    //console.log(val.target.value);\r\n    const value = val.target.value;\r\n    this.setState({ optionValue: value });\r\n\r\n    //  const result=Joi.validate({description: value}, schema, { abortEarly: false } )\r\n    // if(result.error)\r\n    //  console.log(result.error.details[0].message);\r\n\r\n    //const errors = {};\r\n    //for (let item of result.error.details) errors[item.path[0]] = item.message; //in details array, there are 2 properties,path and message.path is the name of the input, message is the error message for that input.\r\n    // console.log(\"errors: \", errors);\r\n  };\r\n\r\n  onChangeDescription = (e) => {\r\n    const value = e.target.value;\r\n    this.setState({ description: value });\r\n  };\r\n  onAddOption = () => {\r\n    const result = Joi.validate(\r\n      { option: this.state.optionValue },\r\n      Schemas.option\r\n    );\r\n    if (result.error) {\r\n      this.setState({ optionValueError: result.error.details[0].message });\r\n    } else {\r\n      const found = this.state.options.some(\r\n        (item) => item.toUpperCase() == this.state.optionValue.toUpperCase()\r\n      );\r\n      if (!found) {\r\n        this.setState({\r\n          options: this.state.options.concat(this.state.optionValue),\r\n          optionValueError: \"\",\r\n        });\r\n      } else {\r\n        this.setState({ optionValueError: \"Already exists\" });\r\n      }\r\n    }\r\n  };\r\n\r\n  onDelete = (option) => {\r\n    let options = this.state.options;\r\n    const index = options.indexOf(option);\r\n    if (index > -1) {\r\n      options.splice(index, 1);\r\n    }\r\n    this.setState({ options: options });\r\n  };\r\n\r\n  renderOptions = () => {\r\n   \r\n    const radioStyle = {\r\n      display: \"inline-block\",\r\n      height: \"30px\",\r\n      lineHeight: \"30px\",\r\n    };\r\n    const { value } = this.state;\r\n    return this.state.options.map((item) => {\r\n      return (\r\n        <div style={{ marginTop: 7 }} id={item} className=\"row\">\r\n          <div className=\"col-5 col-sm-5 offset-sm-1\">\r\n            <Radio.Group onChange={this.onChange} value={value}>\r\n              <Radio style={radioStyle} value={item}>\r\n                {item}\r\n              </Radio>\r\n            </Radio.Group>\r\n          </div>\r\n          <div className=\"col-2 col-sm-1 \">\r\n            <Button onClick={() => this.onDelete(item)}>\r\n              {\" \"}\r\n              <span>\r\n                <DeleteTwoTone twoToneColor=\"#eb2f96\" />\r\n              </span>\r\n            </Button>\r\n          </div>\r\n          {/* <div className=\"col-2 col-sm-1 \">\r\n       \r\n         <Button> <span><EditTwoTone twoToneColor=\"#52c41a\" /></span></Button>\r\n     \r\n        </div> */}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n  onAddQuestion = () => {\r\n    if (this.state.options.length > 0) {\r\n      // options are present\r\n      const result = Joi.validate(\r\n        { description: this.state.description },\r\n        Schemas.description\r\n      );\r\n      if (result.error) {\r\n        this.setState({\r\n          descriptionError: result.error.details[0].message,\r\n          optionsError: \"\",\r\n        });\r\n      } else {\r\n        this.setState({ descriptionError: \"\", optionsError: \"\" });\r\n        if (this.state.value) {\r\n          //      ADD to DATABASE\r\n          // Closing modal\r\n          const ans=[];\r\n          ans[0]=this.state.value;\r\n          const data={category: \"Multiple Choice\", description: this.state.description, options: this.state.options, ans: ans};\r\n          this.props.addQuestion(data);\r\n          this.props.handleOk();\r\n        } else {\r\n          this.setState({ optionsError: \"Please Select Atleast One Option.\" });\r\n        }\r\n\r\n        \r\n      }\r\n    } else {\r\n      // options error : no option present\r\n      this.setState({ optionsError: \"Please add atleast one option\" });\r\n    }\r\n  };\r\n  render() { \r\n    const radioStyle = {\r\n      display: \"inline-block\",\r\n      height: \"30px\",\r\n      lineHeight: \"30px\",\r\n    };\r\n    const { value } = this.state;\r\n    return (\r\n      <>\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n            <TextArea\r\n              placeholder=\"Enter Your Question\"\r\n              value={this.state.description}\r\n              onChange={this.onChangeDescription}\r\n              rows={4}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n            <p style={errorStyleText}>{this.state.descriptionError}</p>\r\n          </div>\r\n        </div>\r\n        <br />\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-sm-5 offset-sm-1\">\r\n            <Input\r\n              placeholder=\"Enter Option Here\"\r\n              value={this.state.optionValue}\r\n              onChange={(val) => {\r\n                this.onChangeOptionField(val);\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"col-12 col-sm-3\">\r\n            <Button\r\n              className=\"add-option\"\r\n              style={{ marginLeft: 0 }}\r\n              block\r\n              type=\"primary\"\r\n              success\r\n              onClick={this.onAddOption}\r\n            >\r\n              {\" \"}\r\n              Add Option\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n            <p style={errorStyleText}>{this.state.optionValueError}</p>\r\n            <br />\r\n            <p>** Please Select Correct Option **</p>\r\n          </div>\r\n        </div>\r\n\r\n        <br />\r\n        {this.renderOptions()}\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-sm-12 offset-sm-1\">\r\n            <p style={errorStyleText}> {this.state.optionsError} </p>\r\n          </div>\r\n        </div>\r\n        <Divider />\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-sm-2 offset-sm-7\">\r\n            <Button block\r\n              onClick={() => {\r\n                this.props.handleCancel();\r\n              }}\r\n              style={{marginTop: 7}}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n          <div className=\"col-12 col-sm-3 \">\r\n            <Button block\r\n              onClick={() => {\r\n                this.onAddQuestion();\r\n              }}\r\n              type=\"primary\"\r\n              style={{marginTop: 7}}\r\n            >\r\n              Add Question\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\util\\colors.js",[],"E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\modals\\CustomTime.js",["208"],"import { Modal, Button, InputNumber, Form } from 'antd';\r\nimport React from \"react\";\r\nconst formItemLayout = {\r\n    labelCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 5 },\r\n    },\r\n    wrapperCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 12 },\r\n    },\r\n  };\r\nexport default class CustomTime extends React.Component {\r\n \r\n\r\n  \r\n\r\n  render() {\r\n    const { visible, loading } = this.props;\r\n    return (\r\n      <>\r\n        \r\n        <Modal\r\n          visible={visible}\r\n          title=\"Custom Time\"\r\n          onOk={this.props.handleOk}\r\n          onCancel={this.props.handleCancel}\r\n          footer={[\r\n            <Button key=\"back\" onClick={this.props.handleCancel}>\r\n              Return\r\n            </Button>,\r\n            <Button key=\"submit\" type=\"primary\" loading={loading} onClick={this.props.handleOk}>\r\n              Submit\r\n            </Button>,\r\n          ]}\r\n        >\r\n          {/* <p>Some contents...</p>\r\n          <p>Some contents...</p>\r\n          <p>Some contents...</p>\r\n          <p>Some contents...</p>\r\n          <p>Some contents...</p> */}\r\n          <Form {...this.formItemLayout}>\r\n         \r\n         <Form.Item  hasFeedback validateStatus=\"success\">\r\n           <InputNumber onChange={(val)=> {this.props.onChange(val)}} value={this.props.time}  style={{ width: '100%' }} />\r\n         </Form.Item>\r\n               </Form>\r\n             \r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\modals\\CustomScore.js",[],"E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\Select-From-dropdown\\EditDropDown.js",["209","210","211"],"import React, { Component } from \"react\";\r\nimport AddQuestionFooter from \"../../AddQuestionFooter\";\r\nimport { Button, Input, Checkbox } from \"antd\";\r\nimport {\r\n  CloseCircleTwoTone,\r\n  PlusOutlined,\r\n  DeleteTwoTone,\r\n} from \"@ant-design/icons\";\r\nimport \"./Styles.css\";\r\nimport { ERROR_COLOR } from \"../../../util/colors\";\r\nimport * as CategoryTypes from \"../../../util/Categories\";\r\nconst { TextArea } = Input;\r\nexport default class EditDropDown extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      description: this.props.data.description,\r\n      options: this.props.data.options,\r\n      addOptionFields: [],\r\n      addOptionFieldsError: [],\r\n\r\n      ans: this.props.data.ans,\r\n\r\n      ansError: \"\",\r\n      descriptionError: \"\",\r\n    };\r\n  }\r\n\r\n  onAddQuestion = () => {\r\n    if(this.state.description.length === 0){\r\n        this.setState({descriptionError: \"Description cannot be Empty!\"});\r\n    }else{\r\n      var temp = this.state.description;\r\n      var dropdownCount = (temp.match(/Dropdown/g) || []).length;\r\n      var optionCount= this.state.options.length;\r\n      if(dropdownCount > optionCount){\r\n          this.setState({descriptionError: \"Count of Dropdown is not equal\"});\r\n      }else if(dropdownCount === optionCount){\r\n        if(optionCount>0){\r\n          const data={category: CategoryTypes.SELECT_FROM_DROPDOWN, description: this.state.description, options: this.state.options, ans: this.state.ans, id : this.props.data.id};\r\n          //console.log(\"data: \", data);\r\n          this.props.updateQuestion(data);\r\n          this.props.handleOk();\r\n        }else{\r\n          this.setState({descriptionError: \"Add atleast one Dropdown\"});\r\n        }\r\n      }\r\n      else{\r\n          this.setState({descriptionError: \"Count of Dropdown is not equal\"});\r\n      }\r\n    }\r\n}\r\n_handleKeyDown = (e) => {\r\n \r\n}\r\n  onChangeDescription = (e) => {\r\n    let value = e.target.value;\r\n    if (e.key === 'Enter') {\r\n     // console.log('do validate');\r\n    \r\n      value= value + \"\\n\";\r\n      //console.log(\"value: \",value);\r\n      this.setState({ description: value });\r\n    }\r\n    console.log(value);\r\n    this.setState({ description: value });\r\n  };\r\n  onEnterOptionValue = (index, e) => {\r\n    const value = e.target.value;\r\n    let newArr = this.state.addOptionFields.splice();\r\n    newArr[index] = value;\r\n    this.setState({ addOptionFields: newArr });\r\n  };\r\n  onOptionChangeValue = (e, index, optionIndex) => {\r\n    const value = e.target.value;\r\n    let optionArray = this.state.options[index].split(\",\");\r\n    optionArray[optionIndex] = value;\r\n    let newOptionArray = optionArray.join(\",\");\r\n    optionArray = this.state.options;\r\n    optionArray[index] = newOptionArray;\r\n    this.setState({ options: optionArray });\r\n  };\r\n  onDeleteOptionValue = (index, optionIndex) => {\r\n    let optionValue = this.state.options[index].split(\",\");\r\n    let del = optionValue.splice(optionIndex, 1);\r\n    let options = this.state.options;\r\n    if (optionIndex === this.state.ans[index]) {\r\n      //if we remove checked then make ans 0 index\r\n      let ans = this.state.ans;\r\n      ans[index] = 0;\r\n      this.setState({ ans });\r\n    }\r\n\r\n    if (optionIndex < this.state.ans[index]) {\r\n      let ans = this.state.ans;\r\n      let ansValue = this.state.ans[index];\r\n      // console.log(\"ans value: \", ansValue);\r\n      ans[index] = ansValue - 1;\r\n      this.setState({ ans });\r\n    }\r\n    const newOptionValue = optionValue.join(\",\");\r\n    options[index] = newOptionValue;\r\n    this.setState({ options: options });\r\n  };\r\n  onChangeCheckedOptionValue = (index, optionIndex) => {\r\n    let ans = this.state.ans;\r\n    ans[index] = optionIndex;\r\n    this.setState({ ans: ans });\r\n  };\r\n  onAddOptionValueBtn = (index) => {\r\n    const value = this.state.addOptionFields[index];\r\n    let addOptionFields = this.state.addOptionFields;\r\n    //addOptionFields--->index\r\n\r\n    //if emty display errors\r\n\r\n    if (value.length === 0) {\r\n      let err = \"Please Enter Value and then Add\";\r\n      let addOptionFieldsError = this.state.addOptionFieldsError;\r\n      addOptionFieldsError[index] = err;\r\n      this.setState({ addOptionFieldsError });\r\n      setTimeout(() => {\r\n        addOptionFieldsError = this.state.addOptionFieldsError;\r\n        addOptionFieldsError[index] = \"\";\r\n        this.setState({ addOptionFieldsError });\r\n      }, 2000);\r\n    } else {\r\n      //check if same exists\r\n      let optionsValue = this.state.options[index].split(\",\");\r\n      if (optionsValue.includes(value)) {\r\n        let err = \"Already Exists\";\r\n        let addOptionFieldsError = this.state.addOptionFieldsError;\r\n        addOptionFieldsError[index] = err;\r\n        this.setState({ addOptionFieldsError });\r\n        setTimeout(() => {\r\n          addOptionFieldsError = this.state.addOptionFieldsError;\r\n          addOptionFieldsError[index] = \"\";\r\n          this.setState({ addOptionFieldsError });\r\n        }, 2000);\r\n      } else {\r\n          if(optionsValue[0]===\"\"){\r\n              optionsValue[0]=value;\r\n              const newOptionsValue = optionsValue.join(\",\");\r\n        const options = this.state.options;\r\n        options[index] = newOptionsValue;\r\n\r\n        addOptionFields[index]=\"\";\r\n        this.setState({ options, addOptionFields });\r\n          }else{\r\n        optionsValue.push(value);\r\n        const newOptionsValue = optionsValue.join(\",\");\r\n        const options = this.state.options;\r\n        options[index] = newOptionsValue;\r\n\r\n        addOptionFields[index]=\"\";\r\n        this.setState({ options, addOptionFields });\r\n        // adding to options //\r\n          }\r\n      }\r\n    }\r\n  };\r\n\r\n  onDeleteDropDown = (index) => {\r\n    let { ans, options, addOptionFields, addOptionFieldsError, description} = this.state;\r\n    ans.splice(index,1);\r\n   \r\n    options.splice(index,1);\r\n    addOptionFields.splice(index,1);\r\n    addOptionFieldsError.splice(index,1);\r\n    const str= \"#\"+(index+1)+\" Dropdown#\";\r\n    const newDesc=description.split(str).join(\"\");\r\n    let count=1; let first=true; let skip=false;\r\n    let finalDesc=newDesc.split(\"Dropdown#\");\r\n    let Desc=[];\r\n  //  console.log(\"newDesc: \", newDesc);\r\n    //console.log(\"finaldescBefore: \", finalDesc);//\r\n    finalDesc.forEach((item,index)=>{\r\n      \r\n         const length= item.length;\r\n       \r\n         if(item.length>1){\r\n             let n=length-3;\r\n            \r\n             if(item[n]===\"#\"){\r\n                 n++;\r\n                 let str=item.split(\"\");\r\n                 str[n]=count+\"\";\r\n                 let newStr=str.join(\"\");\r\n                 count++;\r\n                // console.log(\"str: \", newStr);\r\n                 Desc.push(newStr);\r\n            \r\n             }else{\r\n               // console.log(\"item: \", item);\r\n                Desc.push(item);\r\n             }\r\n\r\n         }else{\r\n          //  console.log(\"item: \", item);\r\n            Desc.push(item);\r\n         }\r\n  \r\n    });\r\n \r\n    let finaldescription= Desc.join(\"Dropdown#\");\r\n    if(Desc.length===1){\r\n        var c = (finaldescription.match(/Dropdown/g) || []).length;\r\n        var f = (finaldescription.match(/#/g) || []).length;\r\n        if(c===0 && f===1){\r\n        finaldescription=finaldescription+\"Dropdown#\";}\r\n    }\r\n  \r\n    this.setState({ans, options, addOptionFields, addOptionFieldsError, description: finaldescription});\r\n  }\r\n\r\n  onAddDropdown = () => {\r\n        let {description, ans, options, addOptionFields, addOptionFieldsError} = this.state;\r\n        let length = this.state.options.length;\r\n        description = description + \" #\"+(length+1)+\" Dropdown#\";\r\n        ans[length]=0;\r\n        options[length]=\"\";\r\n        addOptionFields[length]=\"\";\r\n        addOptionFieldsError[length]=\"\";\r\n        this.setState({description, ans, options, addOptionFields, addOptionFieldsError});\r\n  }\r\n\r\n  renderAddDropdownSection = (item, index) => {\r\n    const optionArray = item.split(\",\"); //1,2,3\r\n    return (\r\n      <div style={{textAlign: \"center\"}} className=\"col-11 col-sm-4 offset-sm-1 dropdown-container-style\">\r\n        <div id=\"box\">\r\n          <Button onClick={()=>{this.onDeleteDropDown(index);}} type=\"text\" id=\"icon-delete-dropdown\">\r\n            <span>\r\n              <CloseCircleTwoTone\r\n                style={{ fontSize: 20 }}\r\n                twoToneColor=\"#eb2f96\"\r\n              />\r\n            </span>\r\n          </Button>\r\n        </div>\r\n        {/* input field and add button */}\r\n        <h5 style={{margin : 7}}>Dropdown #{index+1}</h5>\r\n        <div\r\n          style={{ marginTop: 10 }}\r\n          className=\"row no-gutters enter-option-value-container\"\r\n        >\r\n          <div className=\"enter-option-value-input\">\r\n            <Input\r\n              value={this.state.addOptionFields[index]}\r\n              onChange={(e) => this.onEnterOptionValue(index, e)}\r\n              placeholder=\"Enter Option Value to Add\"\r\n            />\r\n          </div>\r\n          <div className=\"enter-option-value-add-btn\">\r\n            <Button\r\n              onClick={() => {\r\n                this.onAddOptionValueBtn(index);\r\n              }}\r\n              type=\"primary\"\r\n            >\r\n              <span>\r\n                <PlusOutlined\r\n                  style={{\r\n                    color: \"white\",\r\n                    verticalAlign: \"baseline\",\r\n                    fontSize: 18,\r\n                  }}\r\n                />\r\n              </span>\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        {/* error row */}\r\n        <div className=\"row no-gutters\">\r\n          <p style={{ color: ERROR_COLOR }}>\r\n            {this.state.addOptionFieldsError[index]}\r\n          </p>\r\n        </div>\r\n        {/* List of options */}\r\n\r\n        {this.state.options[index] !== \"\"\r\n          ? optionArray.map((item, optionIndex) => {\r\n              let checked = false;\r\n              if (optionIndex === this.state.ans[0]) {\r\n                checked = true;\r\n              }\r\n              return (\r\n                <div className=\"row \">\r\n                  <div className=\"checkbox-div\">\r\n                    <Button type=\"text\">\r\n                      <Checkbox\r\n                        checked={checked}\r\n                        onChange={(e) => {\r\n                          this.onChangeCheckedOptionValue(index, optionIndex);\r\n                        }}\r\n                      />\r\n                    </Button>\r\n                  </div>\r\n                  <div className=\"option-value-div\">\r\n                    <Input\r\n                      value={item}\r\n                      onChange={(e) => {\r\n                        this.onOptionChangeValue(e, index, optionIndex);\r\n                      }}\r\n                      placeholder=\"Option Value\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"option-value-delete-div\">\r\n                    <Button\r\n                      onClick={() => {\r\n                        this.onDeleteOptionValue(index, optionIndex);\r\n                      }}\r\n                    >\r\n                      <span>\r\n                        <DeleteTwoTone\r\n                          twoToneColor=\"#eb2f96\"\r\n                          style={{ verticalAlign: \"baseline\" }}\r\n                        />{\" \"}\r\n                      </span>\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          : null}\r\n      </div>\r\n    );\r\n  };\r\n  render() {\r\n    // console.log(this.state.ans);\r\n    return (\r\n      <>\r\n        <div>\r\n          {/* <h1>Select from Dropdown</h1> */}\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n            <TextArea\r\n              placeholder=\"Enter Your Question\"\r\n              value={this.state.description}\r\n              onChange={this.onChangeDescription}\r\n              rows={4}\r\n              onKeyDown={this._handleKeyDown}\r\n            />\r\n          </div>\r\n          <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n            <p style={{ color: ERROR_COLOR }}>\r\n                {this.state.descriptionError}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n            <div  className=\"col-12 col-sm-10 offset-sm-1\">\r\n                <div >\r\n                <Button onClick={()=>this.onAddDropdown()} type=\"primary\" style={{position: \"absolute\", right :13}}>Add Dropdown</Button>\r\n                </div>\r\n                \r\n            </div>\r\n        </div>\r\n        <br/><br/>\r\n        <div className=\"row\">\r\n          {this.state.options.map((item, index) => {\r\n            return <>{this.renderAddDropdownSection(item, index)}</>;\r\n          })}\r\n        </div>\r\n        <AddQuestionFooter\r\n            type=\"Update\"\r\n          handleCancel={this.props.handleCancel}\r\n          handleOk={this.onAddQuestion}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\Multiple Choice\\EditMultipleChoice.js",["212","213","214"],"import React, { Component } from \"react\";\r\nimport { Input,  Button, Radio, Divider } from \"antd\";\r\nimport { DeleteTwoTone } from \"@ant-design/icons\";\r\nimport Joi from \"joi-browser\";\r\nimport * as Schemas from \"../../Schemas/Mcqs\";\r\nimport \"./MakeMultipleChoice.css\";\r\nconst { TextArea } = Input;\r\n\r\nconst errorStyleText = {\r\n  color: \"#eb2f96\",\r\n};\r\nexport default class MakeMultipleChoice extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      description: this.props.question.description,\r\n      descriptionError: \"\",\r\n      optionValue: \"\",\r\n      optionValueError: \"\",\r\n      options: this.props.question.options,\r\n      optionsError: \"\",\r\n      value: this.props.question.ans[0],\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    \r\n  }\r\n\r\n  onChange = (e) => {\r\n    // console.log(\"radio checked\", e.target.value);\r\n    this.setState({\r\n      value: e.target.value,\r\n    });\r\n  };\r\n  onFinish = (values) => {\r\n    console.log(\"Success:\", values);\r\n  };\r\n\r\n  onFinishFailed = (errorInfo) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  onChangeOptionField = (val) => {\r\n    //console.log(val.target.value);\r\n    const value = val.target.value;\r\n    this.setState({ optionValue: value });\r\n\r\n    //  const result=Joi.validate({description: value}, schema, { abortEarly: false } )\r\n    // if(result.error)\r\n    //  console.log(result.error.details[0].message);\r\n\r\n    //const errors = {};\r\n    //for (let item of result.error.details) errors[item.path[0]] = item.message; //in details array, there are 2 properties,path and message.path is the name of the input, message is the error message for that input.\r\n    // console.log(\"errors: \", errors);\r\n  };\r\n\r\n  onChangeDescription = (e) => {\r\n    const value = e.target.value;\r\n    this.setState({ description: value });\r\n  };\r\n  onAddOption = () => {\r\n    const result = Joi.validate(\r\n      { option: this.state.optionValue },\r\n      Schemas.option\r\n    );\r\n    if (result.error) {\r\n      this.setState({ optionValueError: result.error.details[0].message });\r\n    } else {\r\n      const found = this.state.options.some(\r\n        (item) => item.toUpperCase() == this.state.optionValue.toUpperCase()\r\n      );\r\n      if (!found) {\r\n        this.setState({\r\n          options: this.state.options.concat(this.state.optionValue),\r\n          optionValueError: \"\",\r\n        });\r\n      } else {\r\n        this.setState({ optionValueError: \"Already exists\" });\r\n      }\r\n    }\r\n  };\r\n\r\n  onDelete = (option) => {\r\n    let options = this.state.options;\r\n    const index = options.indexOf(option);\r\n    if (index > -1) {\r\n      options.splice(index, 1);\r\n    }\r\n    this.setState({ options: options });\r\n  };\r\n\r\n  renderOptions = () => {\r\n   \r\n    const radioStyle = {\r\n      display: \"inline-block\",\r\n      height: \"30px\",\r\n      lineHeight: \"30px\",\r\n    };\r\n    const { value } = this.state;\r\n    return this.state.options.map((item) => {\r\n      return (\r\n        <div style={{ marginTop: 7 }} id={item} className=\"row\">\r\n          <div className=\"col-5 col-sm-5 offset-sm-1\">\r\n            <Radio.Group onChange={this.onChange} value={value}>\r\n              <Radio style={radioStyle} value={item}>\r\n                {item}\r\n              </Radio>\r\n            </Radio.Group>\r\n          </div>\r\n          <div className=\"col-2 col-sm-1 \">\r\n            <Button onClick={() => this.onDelete(item)}>\r\n              {\" \"}\r\n              <span>\r\n                <DeleteTwoTone twoToneColor=\"#eb2f96\" />\r\n              </span>\r\n            </Button>\r\n          </div>\r\n          {/* <div className=\"col-2 col-sm-1 \">\r\n       \r\n         <Button> <span><EditTwoTone twoToneColor=\"#52c41a\" /></span></Button>\r\n     \r\n        </div> */}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n  onAddQuestion = () => {\r\n    if (this.state.options.length > 0) {\r\n      // options are present\r\n      const result = Joi.validate(\r\n        { description: this.state.description },\r\n        Schemas.description\r\n      );\r\n      if (result.error) {\r\n        this.setState({\r\n          descriptionError: result.error.details[0].message,\r\n          optionsError: \"\",\r\n        });\r\n      } else {\r\n        this.setState({ descriptionError: \"\", optionsError: \"\" });\r\n        if (this.state.value) {\r\n          //      ADD to DATABASE\r\n          // Closing modal\r\n          const ans=[];\r\n          ans[0]=this.state.value;\r\n          const data={category: \"Multiple Choice\", description: this.state.description, options: this.state.options, ans: ans, id:this.props.question.id};\r\n          this.props.updateQuestion(data);\r\n          this.props.handleOk();\r\n        } else {\r\n          this.setState({ optionsError: \"Please Select Atleast One Option.\" });\r\n        }\r\n\r\n        \r\n      }\r\n    } else {\r\n      // options error : no option present\r\n      this.setState({ optionsError: \"Please add atleast one option\" });\r\n    }\r\n  };\r\n  render() { \r\n    const radioStyle = {\r\n      display: \"inline-block\",\r\n      height: \"30px\",\r\n      lineHeight: \"30px\",\r\n    };\r\n    const { value } = this.state;\r\n    return (\r\n      <>\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n            <TextArea\r\n              placeholder=\"Enter Your Question\"\r\n              value={this.state.description}\r\n              onChange={this.onChangeDescription}\r\n              rows={4}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n            <p style={errorStyleText}>{this.state.descriptionError}</p>\r\n          </div>\r\n        </div>\r\n        <br />\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-sm-5 offset-sm-1\">\r\n            <Input\r\n              placeholder=\"Enter Option Here\"\r\n              value={this.state.optionValue}\r\n              onChange={(val) => {\r\n                this.onChangeOptionField(val);\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"col-12 col-sm-3\">\r\n            <Button\r\n              className=\"add-option\"\r\n              style={{ marginLeft: 0 }}\r\n              block\r\n              type=\"primary\"\r\n              success\r\n              onClick={this.onAddOption}\r\n            >\r\n              {\" \"}\r\n              Add Option\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n            <p style={errorStyleText}>{this.state.optionValueError}</p>\r\n            <br />\r\n            <p>** Please Select Correct Option **</p>\r\n          </div>\r\n        </div>\r\n\r\n        <br />\r\n        {this.renderOptions()}\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-sm-12 offset-sm-1\">\r\n            <p style={errorStyleText}> {this.state.optionsError} </p>\r\n          </div>\r\n        </div>\r\n        <Divider />\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-sm-2 offset-sm-8\">\r\n            <Button block\r\n              onClick={() => {\r\n                this.props.handleCancel();\r\n              }}\r\n              style={{marginTop: 7}}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n          <div className=\"col-12 col-sm-2 \">\r\n            <Button block\r\n              onClick={() => {\r\n                this.onAddQuestion();\r\n              }}\r\n              type=\"primary\"\r\n              style={{marginTop: 7}}\r\n            >\r\n              Update\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\TrueAndFalse\\EditTrueFalse.js",[],"E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\Blanks\\EditFillInTheBlanks.js",["215","216"],"import React, {useState, useEffect} from 'react'\r\nimport {Button, Divider, Input} from \"antd\";\r\nimport {DeleteTwoTone} from \"@ant-design/icons\";\r\nimport Joi from \"joi-browser\";\r\nimport \"./Blanks.css\";\r\nimport * as Schemas from \"../../Schemas/BlanksSchema\";\r\nconst errorStyleText = {\r\n    color: \"#eb2f96\",\r\n  };\r\n  const { TextArea } = Input;\r\n  const blankString=\"____\";\r\nexport   const EditFillInTheBlanks = (props) => {\r\n    const [question, setQuestion] = useState({\r\n       \r\n        category: \"Fill in the Blanks\",\r\n        description: props.data.description,\r\n        options: props.data.ans,\r\n        ans: [],\r\n        \r\n        descriptionError: \"\",\r\n        blankValue: \"\",\r\n        bankValueError: \"\",\r\n    });\r\n\r\n    \r\n    const deleteBlankInDescription=(index)=>{\r\n      console.log(\"index: \", index)\r\n      let desc=question.description;\r\n      const arr = desc.split(\"\");\r\n      let newArr=[];\r\n      let count=0;\r\n      let dashcount=0;\r\n      arr.forEach((item)=>{\r\n     \r\n        if(item === \"_\"){\r\n          console.log(\"dash\");\r\n          if(index===count){\r\n           \r\n\r\n          }else{\r\n            dashcount++;\r\n            newArr.push(item);\r\n           \r\n          }\r\n            \r\n\r\n        }else{\r\n          if(dashcount===4){\r\n            count++;\r\n            dashcount=0;\r\n          }\r\n        \r\n          newArr.push(item);\r\n        }\r\n      });\r\n     \r\n    \r\n      const newDesc= newArr.join(\"\");\r\n      return newDesc;\r\n    };\r\n   const onDelete = (option, i) => {\r\n        let options = question.options;\r\n        const index = options.indexOf(option);\r\n        if (index > -1) {\r\n          options.splice(index, 1);\r\n        }\r\n       const desc= deleteBlankInDescription(i);\r\n       \r\n        setQuestion({ ...question,options: options, description: desc });\r\n      };\r\n    const renderOptions = () => {\r\n  \r\n      const {options}= question;\r\n      const onBlankValueChange=(e,index)=>{\r\n          const value = e.target.value;\r\n          let questionOption = question.options;\r\n          questionOption[index]= value;\r\n          setQuestion({ ...question,options: questionOption});\r\n\r\n      };\r\n        return options.map((item, index) => {\r\n          return (\r\n            <div style={{ marginTop: 7 }} id={item} className=\"row\">\r\n              <div className=\"col-5 col-sm-5 offset-sm-1\">\r\n               <Input onChange={(e)=>{onBlankValueChange(e,index);}} value={item}/>\r\n              </div>\r\n              <div className=\"col-2 col-sm-1 \">\r\n                <Button onClick={() => onDelete(item, index)}>\r\n                  {\" \"}\r\n                  <span>\r\n                    <DeleteTwoTone twoToneColor=\"#eb2f96\" />\r\n                  </span>\r\n                </Button>\r\n              </div>\r\n              {/* <div className=\"col-2 col-sm-1 \">\r\n           \r\n             <Button> <span><EditTwoTone twoToneColor=\"#52c41a\" /></span></Button>\r\n         \r\n            </div> */}\r\n            </div>\r\n          );\r\n        });\r\n      };\r\n  \r\nconst         onAddBlank=()=>{\r\n    if(question.blankValue){\r\n        const found = question.options.some(\r\n            (item) => item.toUpperCase() == question.blankValue.toUpperCase()\r\n          );\r\n          if (!found) {\r\n              let updateDesc= question.description;\r\n              \r\n              updateDesc= updateDesc.concat(blankString);\r\n\r\n            setQuestion({ ...question,options:question.options.concat(question.blankValue),blankValueError: \"\", description: updateDesc});\r\n\r\n          } else {\r\n              setQuestion({ ...question, blankValueError: \"Already exists\"})\r\n            \r\n          }\r\n    }else{\r\n        setQuestion({ ...question, blankValueError: \"Please enter Value and then Press Button !\"})\r\n    }\r\n};\r\n\r\n\r\nconst onAddQuestion = () => {\r\n    if (question.options.length > 0) {\r\n      // options are present\r\n      const result = Joi.validate(\r\n        { description: question.description },\r\n        Schemas.description\r\n      );\r\n      if (result.error) {\r\n        setQuestion({ ...question,\r\n          descriptionError: result.error.details[0].message,\r\n          optionsError: \"\",\r\n        });\r\n      } else {\r\n        setQuestion({  ...question, descriptionError: \"\", optionsError: \"\" });\r\n        \r\n          //      ADD to DATABASE\r\n          // Closing modal\r\n          const ans=question.options;\r\n         \r\n          const data={category: \"Fill in the Blanks\", description: question.description, options: [], ans: ans, id: props.data.id};\r\n          props.updateQuestion(data);\r\n          props.handleOk();\r\n    \r\n\r\n        \r\n      }\r\n    } else {\r\n      // options error : no option present\r\n      setQuestion({ ...question, optionsError: \"Please add atleast one option\" });\r\n    }\r\n  };\r\n \r\n    return (\r\n        <>\r\n        <div className=\"row no-gutters\">\r\n          <div  className=\"col-12 col-sm-7 offset-sm-1 bankValueStyle\">\r\n            <Input\r\n              placeholder=\"Enter Blank Value Here\"\r\n              value={question.blankValue}\r\n              onChange={(e) => {\r\n                setQuestion({ ...question,blankValue: e.target.value});\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"col-12 col-sm-3 \">\r\n            <Button\r\n              className=\"add-blank\"\r\n              style={{ marginLeft: 0 }}\r\n              block\r\n              type=\"primary\"\r\n              success\r\n              onClick={()=>{onAddBlank();}}\r\n            >\r\n              {\" \"}\r\n              Add Blank\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n            <p style={errorStyleText}>{question.blankValueError}</p>\r\n          </div>\r\n        </div>\r\n        <br/>\r\n         <div className=\"row\">\r\n          <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n            <TextArea\r\n              placeholder=\"Enter Your Question\"\r\n              value={question.description}\r\n              onChange={(e)=>setQuestion({...question,description: e.target.value})}\r\n              rows={4}\r\n            />\r\n          </div>\r\n        </div>\r\n        <br/>\r\n        {renderOptions()}\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n            <p style={errorStyleText}>{question.descriptionError}</p>\r\n          </div>\r\n        </div>\r\n        <Divider />\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-sm-2 offset-sm-7\">\r\n            <Button block\r\n              onClick={() => {\r\n                props.handleCancel();\r\n              }}\r\n              style={{marginTop: 7}}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n          <div className=\"col-12 col-sm-3 \">\r\n            <Button block\r\n              onClick={() => {\r\n                onAddQuestion();\r\n              }}\r\n              type=\"primary\"\r\n              style={{marginTop: 7}}\r\n            >\r\n              Update\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\redux\\types\\OptionTypes.js",[],"E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\redux\\types\\Questions.js",[],"E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Schemas\\Mcqs.js",[],"E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Schemas\\BlanksSchema.js",[],"E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\AddQuestionFooter.js",[],"E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Test.js",["217","218","219","220","221","222","223"],"E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\Multiple Choice\\MultipleChoiceTest.js",["224","225","226"],"E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\Select-From-dropdown\\DropDownTest.js",["227","228","229"],"E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\TrueAndFalse\\TrueAndFalseTest.js",["230","231","232","233"],"import React, {useState} from 'react'\r\nimport { Modal, Card, Radio} from \"antd\";\r\nimport { EditTwoTone, DeleteTwoTone } from \"@ant-design/icons\";\r\nimport EditTrueFalse from \"./EditTrueFalse\";\r\nexport default function TrueAndFalse(props) {\r\n    const [visible, toggleModal] = useState(false);\r\n    const radioStyle = {\r\n        display: 'block',\r\n        height: '30px',\r\n        lineHeight: '30px',\r\n      };\r\n      const showModal = () => {\r\n        toggleModal(true);\r\n      };\r\n    \r\n      const handleOk = () => {\r\n        toggleModal(false);\r\n      };\r\n    \r\n      const handleCancel = () => {\r\n        toggleModal(false);\r\n      };\r\n      const onDelete = () => {\r\n        props.deleteQuestion(props.data.id);\r\n      };\r\n\r\n    return (\r\n        <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n        <Card\r\n          style={{ backgroundColor: props.color }}\r\n          \r\n        >\r\n         \r\n<div>\r\n<p style={{ fontSize: 17 }}>\r\n           \r\n           {props.quesNo}. {props.data.description}\r\n          \r\n         </p>\r\n         <Radio.Group  value={props.data.ans[0]}>\r\n      <Radio style={radioStyle} value={true}>True</Radio>\r\n      <Radio style={radioStyle} value={false}>False</Radio>\r\n      \r\n    </Radio.Group>\r\n</div>\r\n\r\n        </Card>\r\n        <Modal\r\n          style={{ width: 1000 }}\r\n          title=\"Edit Question\"\r\n          visible={visible}\r\n          onCancel={() => props.handleCancel()}\r\n          width={1200}\r\n          footer={null}\r\n        >\r\n           <EditTrueFalse updateQuestion={props.updateQuestion} data={props.data} handleOk={handleOk} handleCancel={handleCancel}/> \r\n        </Modal>\r\n      </div>\r\n    )\r\n}\r\n","E:\\projects\\pardhu\\YMDtutor-LMS-\\src\\components\\Categories\\Blanks\\BlanksTest.js",["234","235","236","237","238","239"],{"ruleId":"240","replacedBy":"241"},{"ruleId":"242","replacedBy":"243"},{"ruleId":"244","severity":1,"message":"245","line":97,"column":69,"nodeType":"246","messageId":"247","endLine":97,"endColumn":71},{"ruleId":"248","severity":1,"message":"249","line":106,"column":11,"nodeType":"250","endLine":106,"endColumn":21},{"ruleId":"248","severity":1,"message":"249","line":124,"column":11,"nodeType":"250","endLine":124,"endColumn":21},{"ruleId":"248","severity":1,"message":"249","line":141,"column":11,"nodeType":"250","endLine":141,"endColumn":21},{"ruleId":"248","severity":1,"message":"249","line":158,"column":11,"nodeType":"250","endLine":158,"endColumn":21},{"ruleId":"251","severity":1,"message":"252","line":62,"column":13,"nodeType":"253","endLine":62,"endColumn":59},{"ruleId":"251","severity":1,"message":"252","line":67,"column":13,"nodeType":"253","endLine":67,"endColumn":59},{"ruleId":"251","severity":1,"message":"252","line":72,"column":13,"nodeType":"253","endLine":72,"endColumn":58},{"ruleId":"251","severity":1,"message":"252","line":77,"column":13,"nodeType":"253","endLine":77,"endColumn":58},{"ruleId":"251","severity":1,"message":"252","line":88,"column":11,"nodeType":"253","endLine":88,"endColumn":57},{"ruleId":"251","severity":1,"message":"252","line":93,"column":11,"nodeType":"253","endLine":93,"endColumn":57},{"ruleId":"251","severity":1,"message":"252","line":98,"column":11,"nodeType":"253","endLine":98,"endColumn":56},{"ruleId":"251","severity":1,"message":"252","line":103,"column":11,"nodeType":"253","endLine":103,"endColumn":56},{"ruleId":"251","severity":1,"message":"252","line":114,"column":11,"nodeType":"253","endLine":114,"endColumn":57},{"ruleId":"251","severity":1,"message":"252","line":119,"column":11,"nodeType":"253","endLine":119,"endColumn":57},{"ruleId":"251","severity":1,"message":"252","line":124,"column":11,"nodeType":"253","endLine":124,"endColumn":56},{"ruleId":"251","severity":1,"message":"252","line":129,"column":11,"nodeType":"253","endLine":129,"endColumn":56},{"ruleId":"251","severity":1,"message":"252","line":134,"column":9,"nodeType":"253","endLine":134,"endColumn":55},{"ruleId":"254","severity":1,"message":"255","line":7,"column":5,"nodeType":"256","messageId":"257","endLine":7,"endColumn":8},{"ruleId":"254","severity":1,"message":"258","line":8,"column":5,"nodeType":"256","messageId":"257","endLine":8,"endColumn":12},{"ruleId":"254","severity":1,"message":"259","line":9,"column":5,"nodeType":"256","messageId":"257","endLine":9,"endColumn":12},{"ruleId":"254","severity":1,"message":"260","line":10,"column":5,"nodeType":"256","messageId":"257","endLine":10,"endColumn":25},{"ruleId":"254","severity":1,"message":"261","line":11,"column":5,"nodeType":"256","messageId":"257","endLine":11,"endColumn":19},{"ruleId":"254","severity":1,"message":"262","line":12,"column":5,"nodeType":"256","messageId":"257","endLine":12,"endColumn":17},{"ruleId":"254","severity":1,"message":"263","line":13,"column":5,"nodeType":"256","messageId":"257","endLine":13,"endColumn":17},{"ruleId":"254","severity":1,"message":"264","line":14,"column":5,"nodeType":"256","messageId":"257","endLine":14,"endColumn":15},{"ruleId":"251","severity":1,"message":"252","line":48,"column":29,"nodeType":"253","endLine":48,"endColumn":96},{"ruleId":"244","severity":1,"message":"245","line":43,"column":44,"nodeType":"246","messageId":"247","endLine":43,"endColumn":46},{"ruleId":"254","severity":1,"message":"265","line":40,"column":17,"nodeType":"256","messageId":"257","endLine":40,"endColumn":22},{"ruleId":"266","severity":1,"message":"267","line":32,"column":3,"nodeType":"268","messageId":"269","endLine":56,"endColumn":4},{"ruleId":"270","severity":1,"message":"271","line":50,"column":66,"nodeType":"272","messageId":"273","endLine":50,"endColumn":68},{"ruleId":"270","severity":1,"message":"271","line":107,"column":42,"nodeType":"272","messageId":"273","endLine":107,"endColumn":44},{"ruleId":"254","severity":1,"message":"274","line":83,"column":9,"nodeType":"256","messageId":"257","endLine":83,"endColumn":12},{"ruleId":"254","severity":1,"message":"275","line":170,"column":22,"nodeType":"256","messageId":"257","endLine":170,"endColumn":27},{"ruleId":"254","severity":1,"message":"276","line":170,"column":38,"nodeType":"256","messageId":"257","endLine":170,"endColumn":42},{"ruleId":"270","severity":1,"message":"271","line":70,"column":38,"nodeType":"272","messageId":"273","endLine":70,"endColumn":40},{"ruleId":"254","severity":1,"message":"277","line":161,"column":11,"nodeType":"256","messageId":"257","endLine":161,"endColumn":21},{"ruleId":"254","severity":1,"message":"265","line":166,"column":13,"nodeType":"256","messageId":"257","endLine":166,"endColumn":18},{"ruleId":"254","severity":1,"message":"278","line":3,"column":7,"nodeType":"256","messageId":"257","endLine":3,"endColumn":21},{"ruleId":"254","severity":1,"message":"274","line":85,"column":9,"nodeType":"256","messageId":"257","endLine":85,"endColumn":12},{"ruleId":"254","severity":1,"message":"275","line":172,"column":22,"nodeType":"256","messageId":"257","endLine":172,"endColumn":27},{"ruleId":"254","severity":1,"message":"276","line":172,"column":38,"nodeType":"256","messageId":"257","endLine":172,"endColumn":42},{"ruleId":"270","severity":1,"message":"271","line":70,"column":38,"nodeType":"272","messageId":"273","endLine":70,"endColumn":40},{"ruleId":"254","severity":1,"message":"277","line":161,"column":11,"nodeType":"256","messageId":"257","endLine":161,"endColumn":21},{"ruleId":"254","severity":1,"message":"265","line":166,"column":13,"nodeType":"256","messageId":"257","endLine":166,"endColumn":18},{"ruleId":"254","severity":1,"message":"279","line":1,"column":26,"nodeType":"256","messageId":"257","endLine":1,"endColumn":35},{"ruleId":"270","severity":1,"message":"271","line":108,"column":42,"nodeType":"272","messageId":"273","endLine":108,"endColumn":44},{"ruleId":"254","severity":1,"message":"280","line":9,"column":8,"nodeType":"256","messageId":"257","endLine":9,"endColumn":15},{"ruleId":"254","severity":1,"message":"281","line":11,"column":8,"nodeType":"256","messageId":"257","endLine":11,"endColumn":19},{"ruleId":"244","severity":1,"message":"245","line":93,"column":69,"nodeType":"246","messageId":"247","endLine":93,"endColumn":71},{"ruleId":"248","severity":1,"message":"249","line":102,"column":11,"nodeType":"250","endLine":102,"endColumn":21},{"ruleId":"248","severity":1,"message":"249","line":123,"column":11,"nodeType":"250","endLine":123,"endColumn":21},{"ruleId":"248","severity":1,"message":"249","line":138,"column":11,"nodeType":"250","endLine":138,"endColumn":21},{"ruleId":"248","severity":1,"message":"249","line":153,"column":11,"nodeType":"250","endLine":153,"endColumn":21},{"ruleId":"254","severity":1,"message":"282","line":3,"column":10,"nodeType":"256","messageId":"257","endLine":3,"endColumn":21},{"ruleId":"254","severity":1,"message":"283","line":3,"column":24,"nodeType":"256","messageId":"257","endLine":3,"endColumn":37},{"ruleId":"254","severity":1,"message":"265","line":40,"column":17,"nodeType":"256","messageId":"257","endLine":40,"endColumn":22},{"ruleId":"254","severity":1,"message":"282","line":3,"column":10,"nodeType":"256","messageId":"257","endLine":3,"endColumn":21},{"ruleId":"254","severity":1,"message":"283","line":3,"column":23,"nodeType":"256","messageId":"257","endLine":3,"endColumn":36},{"ruleId":"251","severity":1,"message":"252","line":48,"column":29,"nodeType":"253","endLine":48,"endColumn":96},{"ruleId":"254","severity":1,"message":"282","line":3,"column":10,"nodeType":"256","messageId":"257","endLine":3,"endColumn":21},{"ruleId":"254","severity":1,"message":"283","line":3,"column":23,"nodeType":"256","messageId":"257","endLine":3,"endColumn":36},{"ruleId":"254","severity":1,"message":"284","line":12,"column":13,"nodeType":"256","messageId":"257","endLine":12,"endColumn":22},{"ruleId":"254","severity":1,"message":"285","line":23,"column":13,"nodeType":"256","messageId":"257","endLine":23,"endColumn":21},{"ruleId":"254","severity":1,"message":"283","line":3,"column":10,"nodeType":"256","messageId":"257","endLine":3,"endColumn":23},{"ruleId":"254","severity":1,"message":"282","line":3,"column":25,"nodeType":"256","messageId":"257","endLine":3,"endColumn":36},{"ruleId":"254","severity":1,"message":"284","line":25,"column":9,"nodeType":"256","messageId":"257","endLine":25,"endColumn":18},{"ruleId":"254","severity":1,"message":"285","line":36,"column":9,"nodeType":"256","messageId":"257","endLine":36,"endColumn":17},{"ruleId":"254","severity":1,"message":"286","line":57,"column":9,"nodeType":"256","messageId":"257","endLine":57,"endColumn":24},{"ruleId":"244","severity":1,"message":"245","line":61,"column":44,"nodeType":"246","messageId":"247","endLine":61,"endColumn":46},"no-native-reassign",["287"],"no-negated-in-lhs",["288"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'Nav' is defined but never used.","Identifier","unusedVar","'NavItem' is defined but never used.","'NavLink' is defined but never used.","'UncontrolledDropdown' is defined but never used.","'DropdownToggle' is defined but never used.","'DropdownMenu' is defined but never used.","'DropdownItem' is defined but never used.","'NavbarText' is defined but never used.","'value' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'del' is assigned a value but never used.","'first' is assigned a value but never used.","'skip' is assigned a value but never used.","'radioStyle' is assigned a value but never used.","'formItemLayout' is assigned a value but never used.","'useEffect' is defined but never used.","'Options' is defined but never used.","'AddQuestion' is defined but never used.","'EditTwoTone' is defined but never used.","'DeleteTwoTone' is defined but never used.","'showModal' is assigned a value but never used.","'onDelete' is assigned a value but never used.","'makeDescription' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]