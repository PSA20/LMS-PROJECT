[{"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/index.js":"1","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/reportWebVitals.js":"2","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/App.js":"3","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/redux/reducers/User.js":"4","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/redux/reducers/Option.js":"5","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/redux/reducers/Questions.js":"6","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Test.js":"7","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/MyTest/MyTest.js":"8","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Main.js":"9","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/redux/types/Questions.js":"10","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/redux/types/OptionTypes.js":"11","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Header.js":"12","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/util/Categories.js":"13","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/Multiple Choice/MultipleChoiceTest.js":"14","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/TrueAndFalse/TrueAndFalseTest.js":"15","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/Select-From-dropdown/DropDownTest.js":"16","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/Blanks/BlanksTest.js":"17","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/TrueAndFalse/TrueAndFalse.js":"18","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/Multiple Choice/MultipleChoice.js":"19","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/Select-From-dropdown/DropDown.js":"20","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/MultipleCheckbox/MultipleCheckboxTest.js":"21","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/AddQuestion.js":"22","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/Blanks/Blanks.js":"23","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/redux/actions/QuestionActions.js":"24","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/MultipleCheckbox/MultipleCheckbox.js":"25","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/SequenceInOrder/SequenceInTest.js":"26","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/MatchingWords/MatchingWordsTest.js":"27","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/SequenceInOrder/SequenceInOrder.js":"28","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/MatchingWords/MatchingWords.js":"29","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Options.js":"30","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/Blanks/EditFillInTheBlanks.js":"31","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/Select-From-dropdown/EditDropDown.js":"32","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/TrueAndFalse/EditTrueFalse.js":"33","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/util/colors.js":"34","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/Blanks/MakeFillInTheBlanks.js":"35","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/modals/CustomTime.js":"36","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/modals/CustomScore.js":"37","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/Multiple Choice/MakeMultipleChoice.js":"38","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/MultipleCheckbox/MakeMultipleCheckbox.js":"39","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/MatchingWords/MakeMatchingWords.js":"40","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/SequenceInOrder/MakeSequenceInOrder.js":"41","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/TrueAndFalse/MakeTrueFalse.js":"42","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/Select-From-dropdown/MakeDropDown.js":"43","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Schemas/BlanksSchema.js":"44","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/AddQuestionFooter.js":"45","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Schemas/Mcqs.js":"46","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/Multiple Choice/EditMultipleChoice.js":"47"},{"size":1321,"mtime":1611315081934,"results":"48","hashOfConfig":"49"},{"size":362,"mtime":1610388257991,"results":"50","hashOfConfig":"49"},{"size":544,"mtime":1611315081926,"results":"51","hashOfConfig":"49"},{"size":81,"mtime":1610388257991,"results":"52","hashOfConfig":"49"},{"size":466,"mtime":1610388257991,"results":"53","hashOfConfig":"49"},{"size":3809,"mtime":1611315081934,"results":"54","hashOfConfig":"49"},{"size":6028,"mtime":1611315081934,"results":"55","hashOfConfig":"49"},{"size":6432,"mtime":1611315081934,"results":"56","hashOfConfig":"49"},{"size":8663,"mtime":1611315081934,"results":"57","hashOfConfig":"49"},{"size":360,"mtime":1610388257991,"results":"58","hashOfConfig":"49"},{"size":236,"mtime":1610388257991,"results":"59","hashOfConfig":"49"},{"size":1863,"mtime":1610388257991,"results":"60","hashOfConfig":"49"},{"size":415,"mtime":1611315081934,"results":"61","hashOfConfig":"49"},{"size":1947,"mtime":1611315081930,"results":"62","hashOfConfig":"49"},{"size":2142,"mtime":1611315081934,"results":"63","hashOfConfig":"49"},{"size":4783,"mtime":1611315081930,"results":"64","hashOfConfig":"49"},{"size":5107,"mtime":1611315081930,"results":"65","hashOfConfig":"49"},{"size":2052,"mtime":1610388257991,"results":"66","hashOfConfig":"49"},{"size":2701,"mtime":1611315081930,"results":"67","hashOfConfig":"49"},{"size":4335,"mtime":1611315081930,"results":"68","hashOfConfig":"49"},{"size":2067,"mtime":1611315081930,"results":"69","hashOfConfig":"49"},{"size":5752,"mtime":1611315081926,"results":"70","hashOfConfig":"49"},{"size":5183,"mtime":1611315081930,"results":"71","hashOfConfig":"49"},{"size":710,"mtime":1610388257991,"results":"72","hashOfConfig":"49"},{"size":2727,"mtime":1611315081930,"results":"73","hashOfConfig":"49"},{"size":2481,"mtime":1611315081934,"results":"74","hashOfConfig":"49"},{"size":3313,"mtime":1611315081930,"results":"75","hashOfConfig":"49"},{"size":2883,"mtime":1611315081934,"results":"76","hashOfConfig":"49"},{"size":3336,"mtime":1611315081930,"results":"77","hashOfConfig":"49"},{"size":5965,"mtime":1611315081934,"results":"78","hashOfConfig":"49"},{"size":7026,"mtime":1611315081930,"results":"79","hashOfConfig":"49"},{"size":12840,"mtime":1610388257987,"results":"80","hashOfConfig":"49"},{"size":3049,"mtime":1610388257991,"results":"81","hashOfConfig":"49"},{"size":146,"mtime":1610388257991,"results":"82","hashOfConfig":"49"},{"size":8031,"mtime":1611315081930,"results":"83","hashOfConfig":"49"},{"size":1425,"mtime":1610388257991,"results":"84","hashOfConfig":"49"},{"size":1259,"mtime":1610388257991,"results":"85","hashOfConfig":"49"},{"size":8467,"mtime":1611315081930,"results":"86","hashOfConfig":"49"},{"size":9673,"mtime":1611315081930,"results":"87","hashOfConfig":"49"},{"size":13300,"mtime":1611315081930,"results":"88","hashOfConfig":"49"},{"size":12071,"mtime":1611315081934,"results":"89","hashOfConfig":"49"},{"size":2989,"mtime":1610388257991,"results":"90","hashOfConfig":"49"},{"size":12725,"mtime":1610388257987,"results":"91","hashOfConfig":"49"},{"size":187,"mtime":1610388257991,"results":"92","hashOfConfig":"49"},{"size":852,"mtime":1610388257987,"results":"93","hashOfConfig":"49"},{"size":187,"mtime":1610388257991,"results":"94","hashOfConfig":"49"},{"size":8261,"mtime":1611315081930,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"1vwoake",{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"98"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"98"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"98"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"98"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"98"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"98"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"98"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"98"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"98"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"98"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"98"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"98"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"98"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"183"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"98"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/index.js",[],["207","208"],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/reportWebVitals.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/App.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/redux/reducers/User.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/redux/reducers/Option.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/redux/reducers/Questions.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Test.js",["209"],"import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport {  withRouter } from \"react-router-dom\";\nimport { EditTwoTone,  DeleteTwoTone } from '@ant-design/icons';\nimport {  } from \"reactstrap\";\nimport Header from \"./Header\";\nimport {  Divider } from \"antd\";\nimport \"./css/main.css\";\n// import Options from \"./Options\";\nimport MultipleChoice from \"./Categories/Multiple Choice/MultipleChoiceTest\";\n// import AddQuestion from \"./AddQuestion\";\nimport BlanksTest from \"./Categories/Blanks/BlanksTest\";\nimport DropDownSelect from \"./Categories/Select-From-dropdown/DropDownTest\";\nimport TrueAndFalse from \"./Categories/TrueAndFalse/TrueAndFalseTest\";\nimport * as CategoryTypes from \"../util/Categories\"; \n// import {\n\n// } from \"../redux/actions/QuestionActions\";\n\n\nconst mapDispatchToProps = (dispatch) => ({\n  // addQuestion: (data) => dispatch(addQuestion(data)),\n  // updateQuestion: (data) => dispatch(updateQuestion(data)),\n  // deleteQuestion: (data) => {\n  //   dispatch(deleteQuestion(data));\n  // },\n  // changeColor: (color) => {\n  //   dispatch(changeColor(color));\n  // },\n  // changeScore: (score) => {\n  //   dispatch(changeScore(score));\n  // },\n  // changeTime: (time) => {\n  //   dispatch(changeTime(time));\n  // },\n});\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    questions: state.question,\n  };\n};\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      score: 0,\n      time: 0,\n      color: \"white\",\n    };\n  }\n  componentDidMount() {\n    // this.props.addQuestion();\n  }\n  onChangeTime = (value) => {\n    const reg = /^-?(0|[1-9][0-9]*)(\\.[0-9]*)?$/;\n    if (\n      (!Number.isNaN(value) && reg.test(value)) ||\n      value === \"\" ||\n      value === \"-\"\n    ) {\n      this.props.changeTime(value);\n      this.setState({ time: value, timeError: false });\n    } else {\n      this.setState({ timeError: true });\n    }\n  };\n  onChangeScore = (value) => {\n    //console.log(\"value: \", value)\n    const reg = /^-?(0|[1-9][0-9]*)(\\.[0-9]*)?$/;\n    if (\n      (!Number.isNaN(value) && reg.test(value)) ||\n      value === \"\" ||\n      value === \"-\"\n    ) {\n      this.setState({ score: value, scoreError: false });\n      this.props.changeScore(value);\n    } else {\n      this.setState({ scoreError: true });\n    }\n  };\n  onChangeColor = (color) => {\n    this.props.changeColor(color);\n    this.setState({ color: color });\n  };\n  btnClick = () => {};\n  renderQuestionRows = () => {\n    //<MultipleChoice quesNo={1} data={data} />\n    //    const ques = this.props.questions;\n    //console.log(\"ques.ques: \",this.props.questions.questions);\n\n    const result = this.props.questions.questions.map((item, index) => {\n      //console.log(\"item \",item);\n      index++;\n      //console.log(\"item: \", item.category)\n      if(item.category === CategoryTypes.MULTIPLE_CHOICE){\n      return (\n        <div\n          key={item.ans[0]}\n          style={{ marginTop: 20 }}\n          // key={item}\n          className=\"row\"\n        >\n          <MultipleChoice\n            color={this.props.questions.color}\n            actions={[\n                    \n              <EditTwoTone onClick={()=>{(new MultipleChoice()).showModal();}} twoToneColor=\"#52c41a\"   key=\"edit\" />,\n              <DeleteTwoTone onClick={()=>{this.onDelete();}} twoToneColor=\"#eb2f96\" key=\"del\"/>,\n            ]}\n            quesNo={index}\n            data={item}\n          />\n        </div>\n      );\n    }else if(item.category === CategoryTypes.FILL_IN_THE_BLANKS){\n     // console.log(\"sdfsd\");\n      return (\n        <div\n          key={item.ans[0]}\n          style={{ marginTop: 20 }}\n          // key={item}\n          className=\"row\"\n        >\n          <BlanksTest \n            color={this.props.questions.color}\n            quesNo={index}\n            data={item}\n          />\n        </div>\n      );\n    }else if(item.category === CategoryTypes.SELECT_FROM_DROPDOWN){\n      return (\n        <div\n          key={item.ans[0]}\n          style={{ marginTop: 20 }}\n          // key={item}\n          className=\"row\"\n        >\n          <DropDownSelect\n            color={this.props.questions.color}\n            quesNo={index}\n            data={item}\n          />\n        </div>\n      );\n    }else if(item.category === CategoryTypes.TRUE_AND_FALSE){\n      return (\n        <div\n          key={item.ans[0]}\n          style={{ marginTop: 20 }}\n          // key={item}\n          className=\"row\"\n        >\n          <TrueAndFalse\n            color={this.props.questions.color}\n            quesNo={index}\n            data={item}\n          />\n        </div>\n      );\n    }\n    });\n    return result;\n  };\n\n  render() {\n    //console.log(\"questions:\",this.props.questions);\n    // console.log(\"questions:\",this.props.questions);\n    console.log(\"questions:\",this.props.questions);\n    return (\n      <div className=\"mainBody\">\n        {/* <h1>{this.props.user.username}</h1> */}\n        <Header />\n        <div style={{ position: \"fixed\" }} className=\"add\">\n          <div className=\"row\">\n            <br />\n            <hr />\n            <br />\n          </div>\n        </div>\n        {/* Options */}\n        <div style={{ height: 10 }} />\n        <div style={{ height: 10 }} />\n        <div style={{ height: 10 }} />\n        <div />\n        <Divider style={{ marginTop: 20 }} orientation=\"left\">\n          Options\n        </Divider>\n        <Divider style={{ marginTop: 20 }} orientation=\"left\" />\n        <div style={{flex:1, flexDirection: \"row-reverse\", justifyContent: \"center\", alignItems: \"center\", textAlign: \"center\"}}>\n          <p>Questions :{\" \"}\n          {this.props.questions.questions.length\n            ? this.props.questions.questions.length\n            : \"0\"}</p>\n        \n        </div>\n      \n        <br />\n        {this.props.questions ? (\n          this.renderQuestionRows()\n        ) : (\n          <p>No Questions Added yet</p>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));\n","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/MyTest/MyTest.js",["210","211"],"import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport {  withRouter } from \"react-router-dom\";\nimport Header from \"../Header\";\nimport Countdown from \"react-countdown\";\nimport {  Divider } from \"antd\";\nimport * as CategoryTypes from '../../util/Categories';\nimport MultipleChoiceTest from \"../Categories/Multiple Choice/MultipleChoiceTest\";\nimport BlanksTest from \"../Categories/Blanks/BlanksTest\";\nimport DropDownTest from \"../Categories/Select-From-dropdown/DropDownTest\";\nimport TrueAndFalseTest from \"../Categories/TrueAndFalse/TrueAndFalseTest\";\nimport MultipleCheckboxTest from \"../Categories/MultipleCheckbox/MultipleCheckboxTest\";\nimport SequenceInTest from \"../Categories/SequenceInOrder/SequenceInTest\";\nimport MatchingWordsTest from \"../Categories/MatchingWords/MatchingWordsTest\";\n// import MultipleC from \"../Categories/Multip\"\n\nclass MyTest extends Component{\n\n\n  renderQuestionRows = () => {\n    //<MultipleChoice quesNo={1} data={data} />\n    //    const ques = this.props.questions;\n    //console.log(\"ques.ques: \",this.props.questions.questions);\n\n    const result = this.props.questions.questions.map((item, index) => {\n      //console.log(\"item \",item);\n      index++;\n      //console.log(\"item: \", item.category)\n      if(item.category === CategoryTypes.MULTIPLE_CHOICE){\n      return (\n        <div\n          key={item.ans[0]}\n          style={{ marginTop: 20 }}\n          // key={item}\n          className=\"row\"\n        >\n          <MultipleChoiceTest\n            color={this.props.questions.color}\n            // actions={[\n                    \n            //   <EditTwoTone onClick={()=>{(new MultipleChoice()).showModal();}} twoToneColor=\"#52c41a\"   key=\"edit\" />,\n            //   <DeleteTwoTone onClick={()=>{this.onDelete();}} twoToneColor=\"#eb2f96\" key=\"del\"/>,\n            // ]}\n            quesNo={index}\n            data={item}\n          />\n        </div>\n      );\n    }else if(item.category === CategoryTypes.FILL_IN_THE_BLANKS){\n     // console.log(\"sdfsd\");\n      return (\n        <div\n          key={item.ans[0]}\n          style={{ marginTop: 20 }}\n          // key={item}\n          className=\"row\"\n        >\n          <BlanksTest\n            color={this.props.questions.color}\n            quesNo={index}\n            data={item}\n          />\n        </div>\n      );\n    }else if(item.category === CategoryTypes.SELECT_FROM_DROPDOWN){\n      return (\n        <div\n          key={item.ans[0]}\n          style={{ marginTop: 20 }}\n          // key={item}\n          className=\"row\"\n        >\n          <DropDownTest\n            color={this.props.questions.color}\n            quesNo={index}\n            data={item}\n          />\n        </div>\n      );\n    }else if(item.category === CategoryTypes.TRUE_AND_FALSE){\n      return (\n        <div\n          key={item.ans[0]}\n          style={{ marginTop: 20 }}\n          // key={item}\n          className=\"row\"\n        >\n          <TrueAndFalseTest\n            color={this.props.questions.color}\n            quesNo={index}\n            data={item}\n          />\n        </div>\n      )\n      ;\n    }\n    else if(item.category === CategoryTypes.MULTIPLE_CHECKBOX){\n      return (\n        <div\n          key={item.ans[0]}\n          style={{ marginTop: 20 }}\n          // key={item}\n          className=\"row\"\n        >\n          <MultipleCheckboxTest\n            color={this.props.questions.color}\n            quesNo={index}\n            data={item}\n          />\n        </div>\n      );\n    }\n    else if(item.category === CategoryTypes.SEQUENCE_IN_ORDER){\n      return (\n        <div\n          key={item.ans[0]}\n          style={{ marginTop: 20 }}\n          // key={item}\n          className=\"row\"\n        >\n          <SequenceInTest\n            color={this.props.questions.color}\n            quesNo={index}\n            data={item}\n          />\n        </div>\n      );\n    }\n    else if(item.category === CategoryTypes.MATCHING_WORDS){\n      return (\n        <div\n          key={item.ans[0]}\n          style={{ marginTop: 20 }}\n          // key={item}\n          className=\"row\"\n        >\n          <MatchingWordsTest\n            color={this.props.questions.color}\n            quesNo={index}\n            data={item}\n          />\n        </div>\n      );\n    }\n    })\n    ;\n    return result;\n  };\n\n\n    render(){\n        console.log(this.props.questions.time)\n        return(\n            // <div>\n            //     <Countdown date={Date.now() + 30000}></Countdown>\n            //     <Countdown date={Date.now() + (this.props.questions.time * 60 * 1000)}></Countdown>\n            // </div>\n            <div className=\"mainBody\">\n        {/* <h1>{this.props.user.username}</h1> */}\n        <Header />\n        <div style={{ position: \"fixed\" }} className=\"add\">\n          <div className=\"row\">\n            <br />\n            <hr />\n            <br />\n          </div>\n        </div>\n        {/* Options */}\n        <div style={{ height: 10 }} />\n        <div style={{ height: 10 }} />\n        <div style={{ height: 10 }} />\n        <div />\n        <Divider style={{ marginTop: 20 }} orientation=\"left\">\n          Options\n        </Divider>\n        <Divider style={{ marginTop: 20 }} orientation=\"left\" />\n        <div style={{flex:1, flexDirection: \"row-reverse\", justifyContent: \"center\", alignItems: \"center\", textAlign: \"center\"}}>\n          <p>Questions :{\" \"}\n          {this.props.questions.questions.length\n            ? this.props.questions.questions.length\n            : \"0\"}</p>\n        \n        </div>\n      \n        <br />\n        {this.props.questions ? (\n          this.renderQuestionRows()\n        ) : (\n          <p>No Questions Added yet</p>\n        )}\n      </div>\n        )\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    // addQuestion: (data) => dispatch(addQuestion(data)),\n    // updateQuestion: (data) => dispatch(updateQuestion(data)),\n    // deleteQuestion: (data) => {\n    //   dispatch(deleteQuestion(data));\n    // },\n    // changeColor: (color) => {\n    //   dispatch(changeColor(color));\n    // },\n    // changeScore: (score) => {\n    //   dispatch(changeScore(score));\n    // },\n    // changeTime: (time) => {\n    //   dispatch(changeTime(time));\n    // },\n  });\n  const mapStateToProps = (state) => {\n    return {\n      user: state.user,\n      questions: state.question,\n      option: state.option\n    };\n  };\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MyTest));","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Main.js",["212"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {  withRouter } from \"react-router-dom\";\r\nimport {  } from \"reactstrap\";\r\nimport Header from \"./Header\";\r\nimport {  Divider } from \"antd\";\r\nimport \"./css/main.css\";\r\nimport Options from \"./Options\";\r\nimport MultipleChoice from \"./Categories/Multiple Choice/MultipleChoice\";\r\nimport MultipleCheckbox from \"./Categories/MultipleCheckbox/MultipleCheckbox\";\r\nimport SequenceinOrder from \"./Categories/SequenceInOrder/SequenceInOrder\";\r\nimport AddQuestion from \"./AddQuestion\";\r\nimport {Blanks} from \"./Categories/Blanks/Blanks\";\r\nimport DropDownSelect from \"./Categories/Select-From-dropdown/DropDown\";\r\nimport TrueAndFalse from \"./Categories/TrueAndFalse/TrueAndFalse\";\r\nimport MatchingWords from \"./Categories/MatchingWords/MatchingWords\";\r\nimport * as CategoryTypes from \"../util/Categories\"; \r\nimport { NavLink } from 'react-router-dom';\r\nimport {\r\n  addQuestion,\r\n  deleteQuestion,\r\n  changeColor,\r\n  changeScore,\r\n  changeTime,\r\n  updateQuestion,\r\n} from \"../redux/actions/QuestionActions\";\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addQuestion: (data) => dispatch(addQuestion(data)),\r\n  updateQuestion: (data) => dispatch(updateQuestion(data)),\r\n  deleteQuestion: (data) => {\r\n    dispatch(deleteQuestion(data));\r\n  },\r\n  changeColor: (color) => {\r\n    dispatch(changeColor(color));\r\n  },\r\n  changeScore: (score) => {\r\n    dispatch(changeScore(score));\r\n  },\r\n  changeTime: (time) => {\r\n    dispatch(changeTime(time));\r\n  },\r\n});\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user: state.user,\r\n    questions: state.question,\r\n  };\r\n};\r\n\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      score: 0,\r\n      time: 0,\r\n      color: \"white\",\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    // this.props.addQuestion();\r\n  }\r\n  onChangeTime = (value) => {\r\n    const reg = /^-?(0|[1-9][0-9]*)(\\.[0-9]*)?$/;\r\n    if (\r\n      (!Number.isNaN(value) && reg.test(value)) ||\r\n      value === \"\" ||\r\n      value === \"-\"\r\n    ) {\r\n      this.props.changeTime(value);\r\n      this.setState({ time: value, timeError: false });\r\n    } else {\r\n      this.setState({ timeError: true });\r\n    }\r\n  };\r\n  onChangeScore = (value) => {\r\n    //console.log(\"value: \", value)\r\n    const reg = /^-?(0|[1-9][0-9]*)(\\.[0-9]*)?$/;\r\n    if (\r\n      (!Number.isNaN(value) && reg.test(value)) ||\r\n      value === \"\" ||\r\n      value === \"-\"\r\n    ) {\r\n      this.setState({ score: value, scoreError: false });\r\n      this.props.changeScore(value);\r\n    } else {\r\n      this.setState({ scoreError: true });\r\n    }\r\n  };\r\n  onChangeColor = (color) => {\r\n    this.props.changeColor(color);\r\n    this.setState({ color: color });\r\n  };\r\n  btnClick = () => {};\r\n  renderQuestionRows = () => {\r\n    //<MultipleChoice quesNo={1} data={data} />\r\n    //    const ques = this.props.questions;\r\n    //console.log(\"ques.ques: \",this.props.questions.questions);\r\n\r\n    const result = this.props.questions.questions.map((item, index) => {\r\n      //console.log(\"item \",item);\r\n      index++;\r\n      //console.log(\"item: \", item.category)\r\n      if(item.category === CategoryTypes.MULTIPLE_CHOICE){\r\n      return (\r\n        <div\r\n          key={item.ans[0]}\r\n          style={{ marginTop: 20 }}\r\n          // key={item}\r\n          className=\"row\"\r\n        >\r\n          <MultipleChoice\r\n            deleteQuestion={this.props.deleteQuestion}\r\n            updateQuestion={this.props.updateQuestion}\r\n            color={this.props.questions.color}\r\n            quesNo={index}\r\n            data={item}\r\n          />\r\n        </div>\r\n      );\r\n    }else if(item.category === CategoryTypes.FILL_IN_THE_BLANKS){\r\n     // console.log(\"sdfsd\");\r\n      return (\r\n        <div\r\n          key={item.ans[0]}\r\n          style={{ marginTop: 20 }}\r\n          // key={item}\r\n          className=\"row\"\r\n        >\r\n          <Blanks\r\n            deleteQuestion={this.props.deleteQuestion}\r\n            updateQuestion={this.props.updateQuestion}\r\n            color={this.props.questions.color}\r\n            quesNo={index}\r\n            data={item}\r\n          />\r\n        </div>\r\n      );\r\n    }else if(item.category=== CategoryTypes.SELECT_FROM_DROPDOWN){\r\n      return (\r\n        <div\r\n          key={item.ans[0]}\r\n          style={{ marginTop: 20 }}\r\n          // key={item}\r\n          className=\"row\"\r\n        >\r\n          <DropDownSelect\r\n            deleteQuestion={this.props.deleteQuestion}\r\n            updateQuestion={this.props.updateQuestion}\r\n            color={this.props.questions.color}\r\n            quesNo={index}\r\n            data={item}\r\n          />\r\n        </div>\r\n      );\r\n    }else if(item.category=== CategoryTypes.TRUE_AND_FALSE){\r\n      return (\r\n        <div\r\n          key={item.ans[0]}\r\n          style={{ marginTop: 20 }}\r\n          // key={item}\r\n          className=\"row\"\r\n        >\r\n          <TrueAndFalse\r\n            deleteQuestion={this.props.deleteQuestion}\r\n            updateQuestion={this.props.updateQuestion}\r\n            color={this.props.questions.color}\r\n            quesNo={index}\r\n            data={item}\r\n          />\r\n        </div>\r\n      );\r\n    }else if(item.category === CategoryTypes.MULTIPLE_CHECKBOX){\r\n      return (\r\n        <div\r\n          key={item.ans[0]}\r\n          style={{ marginTop: 20 }}\r\n          // key={item}\r\n          className=\"row\"\r\n        >\r\n          <MultipleCheckbox\r\n            deleteQuestion={this.props.deleteQuestion}\r\n            updateQuestion={this.props.updateQuestion}\r\n            color={this.props.questions.color}\r\n            quesNo={index}\r\n            data={item}\r\n          />\r\n        </div>\r\n      );\r\n    }else if(item.category === CategoryTypes.SEQUENCE_IN_ORDER){\r\n      return (\r\n        <div\r\n          key={item.ans[0]}\r\n          style={{ marginTop: 20 }}\r\n          // key={item}\r\n          className=\"row\"\r\n        >\r\n          <SequenceinOrder\r\n            deleteQuestion={this.props.deleteQuestion}\r\n            updateQuestion={this.props.updateQuestion}\r\n            color={this.props.questions.color}\r\n            quesNo={index}\r\n            data={item}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    else if(item.category === CategoryTypes.MATCHING_WORDS){\r\n      return (\r\n        <div\r\n          key={item.ans[0]}\r\n          style={{ marginTop: 20 }}\r\n          // key={item}\r\n          className=\"row\"\r\n        >\r\n          <MatchingWords\r\n            deleteQuestion={this.props.deleteQuestion}\r\n            updateQuestion={this.props.updateQuestion}\r\n            color={this.props.questions.color}\r\n            quesNo={index}\r\n            data={item}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    })\r\n    ;\r\n    return result;\r\n  };\r\n\r\n  render() {\r\n    //console.log(\"questions:\",this.props.questions);\r\n    console.log(\"questions:\",this.props.questions);\r\n    // console.log(this.props.data)\r\n    return (\r\n      <div className=\"mainBody\">\r\n        {/* <h1>{this.props.user.username}</h1> */}\r\n        <Header />\r\n        <div style={{ position: \"fixed\" }} className=\"add\">\r\n          <div className=\"row\">\r\n            \r\n            <AddQuestion addQuestion={this.props.addQuestion} />\r\n            \r\n            <br />\r\n            <NavLink to=\"/test\">TEST START</NavLink>\r\n            <hr />\r\n            <NavLink to=\"/test123\">TEST MYY</NavLink>\r\n            <br />\r\n          </div>\r\n          \r\n        </div>\r\n        {/* Options */}\r\n        <div style={{ height: 10 }} />\r\n        <div style={{ height: 10 }} />\r\n        <div style={{ height: 10 }} />\r\n        <div />\r\n        <Divider style={{ marginTop: 20 }} orientation=\"left\">\r\n          Options\r\n        </Divider>\r\n        <Options\r\n          onChangeColor={this.onChangeColor}\r\n          onChangeScore={this.onChangeScore}\r\n          onChangeTime={this.onChangeTime}\r\n          time={this.props.questions.time}\r\n          score={this.props.questions.score}\r\n          color={this.props.questions.color}\r\n        />\r\n        <Divider style={{ marginTop: 20 }} orientation=\"left\" />\r\n        <div style={{flex:1, flexDirection: \"row-reverse\", justifyContent: \"center\", alignItems: \"center\", textAlign: \"center\"}}>\r\n          <p>Questions :{\" \"}\r\n          {this.props.questions.questions.length\r\n            ? this.props.questions.questions.length\r\n            : \"0\"}</p>\r\n        \r\n        </div>\r\n      \r\n        <br />\r\n        {this.props.questions ? (\r\n          this.renderQuestionRows()\r\n        ) : (\r\n          <p>No Questions Added yet</p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));\r\n","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/redux/types/Questions.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/redux/types/OptionTypes.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Header.js",["213","214","215","216","217","218","219","220"],"import React, { Component } from 'react'\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    UncontrolledDropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    NavbarText\r\n  } from 'reactstrap';\r\nexport default class Header extends Component {\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.state={ isOpen: false};\r\n\r\n    }\r\n\r\n     setIsOpen=()=>{\r\n     this.setState({isOpen: !this.state.isOpen})\r\n }\r\n toggle=()=>{\r\n     this.setIsOpen();\r\n } \r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar color=\"light\" fixed=\"top\"  light expand=\"md\">\r\n        <NavbarBrand href=\"/\">DYDQuizMaker</NavbarBrand>\r\n        <NavbarToggler onClick={this.toggle} />\r\n        <Collapse isOpen={this.state.isOpen} navbar>\r\n          {/* <Nav className=\"mr-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink href=\"/components/\">Components</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href=\"https://github.com/reactstrap/reactstrap\">GitHub</NavLink>\r\n            </NavItem>\r\n            <UncontrolledDropdown nav inNavbar>\r\n              <DropdownToggle nav caret>\r\n                Options\r\n              </DropdownToggle>\r\n              <DropdownMenu right>\r\n                <DropdownItem>\r\n                  Option 1\r\n                </DropdownItem>\r\n                <DropdownItem>\r\n                  Option 2\r\n                </DropdownItem>\r\n                <DropdownItem divider />\r\n                <DropdownItem>\r\n                  Reset\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n          </Nav> */}\r\n          {/* <NavbarText>Simple Text</NavbarText> */}\r\n        </Collapse>\r\n      </Navbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/util/Categories.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/Multiple Choice/MultipleChoiceTest.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/TrueAndFalse/TrueAndFalseTest.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/Select-From-dropdown/DropDownTest.js",["221","222","223","224"],"import React, { Component } from 'react'\nimport {Modal, Card, Menu, Dropdown, Button} from \"antd\";\nimport { EditTwoTone, DeleteTwoTone} from \"@ant-design/icons\";\nimport EditDropDown from \"./EditDropDown\";\nexport default class DropDownSelect extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            val: [],\n            visible: false,\n          };\n    }\n    showModal = () => {\n      this.setState({ visible: true });\n    };\n  \n    handleOk = () => {\n      this.setState({ visible: false });\n    };\n  \n    handleCancel = () => {\n      this.setState({ visible: false });\n    };\n\n    onDelete=()=>{\n      this.props.deleteQuestion(this.props.data.id);\n    }\n     isNumeric(str) {\n        if (typeof str != \"string\") return false // we only process strings!  \n        return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...\n               !isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail\n      }\n    onClickHandler = (count, e) =>{\n      console.log(this.state.val)\n      let ca = this.props.data.options[count].split(\",\")\n      let ans = []\n      ans= ca[e.key]\n      // if(this.state.val[count]){\n\n      // }\n      console.log( ca[e.key], e)\n      console.log(ans)\n      this.setState({val:this.state.val.concat({count, ans})})\n      \n      console.log(this.state.val)\n    }\n    // onClickHandler = ({key}) =>{\n    //   let ca = this.props.data.options[key]\n    //   // this.setState({val:\"\"})\n    //   console.log( key,ca)\n    //   // console.log(e.target)\n    // }\n\n\n\n      menu =(options, ans, count)=> {\n        const optionsArr = options.split(\",\");\n           return <Menu onClick={(e)=>{this.onClickHandler(count, e)}}>  {optionsArr.map((item,index)=>{\n               // if(index === ans){\n               //     return   <Menu.Item key={index} danger>{item}</Menu.Item>;\n               // }else{\n                   return(\n\n                         <Menu.Item key={index} >\n                         \n                             {item}\n                         \n                         </Menu.Item>\n                       \n                       \n                     );\n               }\n           // }\n           )}</Menu>;\n    };\n    onRenderDropdownQuestion=(quesNo, data)=> {\n        const dataArray = data.description.split(\"Dropdown#\");\n        let ansIndex=0;\n        return(<p style={{ fontSize: 17}}>{quesNo}. {\"  \"}\n            {dataArray.map((item, index)=>{\n               // console.log(\"item: \", item);\n                if(item.includes(\"#\")){\n                    const deepItem=item.split(\"#\");\n                    console.log(\"deepItem: \", deepItem);\n                     return deepItem.map((item2)=>{\n                        if(this.isNumeric(item2[0])){\n                            ansIndex++;\n                            let count=ansIndex-1;\n                        return(<Dropdown overlay={this.menu(data.options[count], data.ans[count], count)}>\n                            {/* <a className=\"ant-dropdown-link\"  onClick={e => e.preventDefault()}>\n                              -Select- \n                            </a> */}\n                            <Button className=\"ant-dropdown-link\"  onClick={e => e.preventDefault()}>\n                              -Select- \n                            </Button>\n                            {/* on click event should have to save the value and the index of the dropdown and the\n                            name -SELECT- have to be changed according to the options... */}\n                          </Dropdown>);    \n                        }\n                        if(item2.includes(\"\\n\")){\n                            const item3 = item2.split(\"\\n\");\n                            return item3.map((i)=>{\n                                return(<><br/> {i}</>);\n                            })\n                        }\n                        return item2;\n                     })\n\n                }else{\n                    return item;\n                }\n            })}\n        </p>);\n    }\n\n    render() {\n        return (\n            <div className=\"col-12 col-sm-10 offset-sm-1\">\n      <Card\n        style={{ backgroundColor: this.props.color }}\n\n      >\n       {this.onRenderDropdownQuestion(this.props.quesNo, this.props.data)}\n      </Card>\n      {/* <Modal\n        style={{ width: 1000 }}\n        title=\"Edit Question\"\n        visible={this.state.visible}\n        onCancel={() => this.handleCancel()}\n        width={1200}\n        footer={null} */}\n      {/* > */}\n         {/* <EditDropDown updateQuestion={this.props.updateQuestion} data={this.props.data} handleOk={this.handleOk} handleCancel={this.handleCancel}/>  */}\n      {/* </Modal> */}\n    </div>\n        )\n    }\n}\n","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/Blanks/BlanksTest.js",["225","226","227","228","229","230"],"import React, { useState } from \"react\";\nimport { Modal, Card } from \"antd\";\nimport { DeleteTwoTone, EditTwoTone } from \"@ant-design/icons\";\nimport {EditFillInTheBlanks} from \"./EditFillInTheBlanks\";\nconst blankString = \"____\";\n\n\nconst myIncludes=(str)=>{\n    if(str.includes(\".\")){\n        return true;\n    }else if(str.includes(\",\")){\n        return true;\n    }else if(str.includes(\"'\")){\n        return true;\n    }else if(str.includes(\"\\\"\")){\n        return true;\n    }\n    return false;\n};\n\nexport const BlanksTest = (props) => {\n // console.log(\"props: \",props.data);\n  const [visible, toggleModal] = useState(false);\n\n  const showModal = () => {\n    toggleModal(true);\n  };\n\n  const handleOk = () => {\n    toggleModal(false);\n  };\n\n  const handleCancel = () => {\n    toggleModal(false);\n  };\n  const onDelete = () => {\n    props.deleteQuestion(props.data.id);\n  };\n  var numOfBlanks;\n  const makeNumberedBlanks = (sen) => {\n    const words = sen.split('____');\n    \n    let mod = \"\";\n    let c=1;\n    for(let i=0;i<words.length;i++){\n      if(words[i].length>0){\n        \n        mod+= \"(\"+c+\")____\"+words[i];\n        c++;\n      }\n      \n    }\n    numOfBlanks = c-1;\n    return mod;\n  };\n  \n  const makeDescription = (desc) => {\n    //console.log(\"ans: \",props.data.ans[0]);\n    const array = desc.split(\" \");\n    let count = 0;\n    const result = array.map((item, index) => {\n      // console.log(index);\n      if((myIncludes(item)) &&  item.includes(\"____\")){\n        console.log(\"found: \", item);\n        if (item[item.length - 1] === \".\") {\n            \n            count=count+1\n          return (\n            <span style={{ color: \"#1890ff\", textDecoration: \"underline\" }}>\n              {props.data.ans[count-1]}\n              \n              \n            </span>\n          );\n        } else if (item[0] === \".\") {\n            console.log(\"found\");\n            count=count+1;\n            return (\n                <span style={{ color: \"#1890ff\", textDecoration: \"underline\" }}>.{\" \"} \n                  {props.data.ans[count-1]}\n                  \n                </span>\n              );\n        }else if (item[item.length - 1] === \",\") {\n            count=count+1;\n            return (\n              <span style={{ color: \"#1890ff\", textDecoration: \"underline\" }}>\n                {props.data.ans[count-1]}\n                {\",\"}\n                \n              </span>\n            );\n          } else if (item[0] === \",\") {\n            count=count+1;\n              return (\n                  <span style={{ color: \"#1890ff\", textDecoration: \"underline\" }}>,{\" \"} \n                    {props.data.ans[count-1]}\n                    \n                  </span>\n                );\n          }\n          \n      }else{ \n      if (item === blankString) {\n        count=count+1;\n        return (\n          <span style={{ color: \"#1890ff\", textDecoration: \"underline\" }}>\n            {props.data.ans[count-1]}{\" \"}\n           \n          </span>\n        );\n      } else if (item !== blankString) {\n        return <span>{item} </span>;\n      }\n    \n    }if(item.includes(\".\")){\n        count=count+1;\n        const arr= item.split(\".\");\n        if(arr[0]===blankString){\n            return(<>\n            <span style={{ color: \"#1890ff\", textDecoration: \"underline\" }}>\n            {props.data.ans[count-1]}\n            \n          </span>. {arr[1]} {\" \"}</>);\n        }else{\n            return(\n            <>{arr[0]}.\n            <span style={{ color: \"#1890ff\", textDecoration: \"underline\" }}>\n            {props.data.ans[count-1]} {\" \"}\n            \n          </span>\n          </>);\n        }\n    }\n    if(item.includes(\",\")){\n        count=count+1;\n        const arr= item.split(\",\");\n        if(arr[0]===blankString){\n            return(<>\n            <span style={{ color: \"#1890ff\", textDecoration: \"underline\" }}>\n            {props.data.ans[count-1]}\n            \n          </span>, {arr[1]} {\" \"}</>);\n        }else{\n            return(\n            <>{arr[0]},\n            <span style={{ color: \"#1890ff\", textDecoration: \"underline\" }}>\n            {props.data.ans[count-1]} {\" \"}\n            \n          </span>\n          </>);\n        }\n    }\n     \n    });\n\n\n     //console.log(\"last result\");\n    return result;\n  };\n  return (\n    <div className=\"col-12 col-sm-10 offset-sm-1\">\n      <Card\n        style={{ backgroundColor: props.color }}\n        \n      >\n        <p style={{ fontSize: 17 }}>\n         \n          {props.quesNo}. {makeNumberedBlanks(props.data.description)}\n        </p>\n        <div>\n        {Array(numOfBlanks).fill(0).map((item, i) =>{\n           return (<span>{i+1}<input style={{marginLeft:\"5px\",marginBottom:\"2px\"}}></input><br/></span>)\n        })}\n        </div>\n      </Card>\n      <Modal\n        style={{ width: 1000 }}\n        title=\"Edit Question\"\n        visible={visible}\n        onCancel={() => handleCancel()}\n        width={1200}\n        footer={null}\n      >\n         <EditFillInTheBlanks updateQuestion={props.updateQuestion} data={props.data} handleOk={handleOk} handleCancel={handleCancel}/> \n      </Modal>\n    </div>\n  );\n};\n\n\nexport default BlanksTest","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/TrueAndFalse/TrueAndFalse.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/Multiple Choice/MultipleChoice.js",["231"],"import React, { Component } from 'react'\r\nimport { Radio,  Card, Modal } from 'antd';\r\nimport { EditTwoTone,  DeleteTwoTone } from '@ant-design/icons';\r\nimport EditMultipleChoice from \"./EditMultipleChoice\";\r\nimport MakeMultipleChoice from \"./MakeMultipleChoice\";\r\nexport default class MultipleChoice extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: 1,\r\n            visible: false,\r\n          };\r\n    }\r\n    showModal = () => {\r\n      this.setState({ visible: true });\r\n    };\r\n  \r\n    handleOk = () => {\r\n      this.setState({ visible: false });\r\n    };\r\n  \r\n    handleCancel = () => {\r\n      this.setState({ visible: false });\r\n    };\r\n\r\n    onDelete=()=>{\r\n      this.props.deleteQuestion(this.props.data.id);\r\n    }\r\n      onChange = e => {\r\n        //console.log('radio checked', e.target.value);\r\n        this.setState({\r\n          value: e.target.value,\r\n        });\r\n      };\r\n    render() {\r\n        const radioStyle = {\r\n          display: 'block',\r\n          height: '30px',\r\n          lineHeight: '30px',\r\n        };\r\n        \r\n        // const { value } = this.state;\r\n        return (\r\n            <div  className=\"col-12 col-sm-10 offset-sm-1\">\r\n                <Card style={{backgroundColor:this.props.color}}\r\n                  actions={[\r\n                    \r\n                    <EditTwoTone onClick={()=>{this.showModal();}} twoToneColor=\"#52c41a\"   key=\"edit\" />,\r\n                    <DeleteTwoTone onClick={()=>{this.onDelete();}} twoToneColor=\"#eb2f96\" key=\"del\"/>,\r\n                  ]}>\r\n        <p style={{ fontSize: 17}}>{this.props.quesNo}. {this.props.data.description}</p>\r\n                <Radio.Group value={this.props.data.ans[0]}>\r\n                    {this.props.data.options.map(index=>{\r\n                      \r\n                        return(\r\n                            <Radio key={index} style={radioStyle} value={index}>\r\n                            {index}\r\n                          </Radio>\r\n                        );\r\n                    })}\r\n           \r\n                      \r\n          </Radio.Group>\r\n                </Card>\r\n            <Modal\r\n              style={{ width: 1000 }}\r\n              title=\"Edit Question\"\r\n              visible={this.state.visible}\r\n              onCancel={this.handleCancel}\r\n              width={1200}\r\n              footer={null}\r\n            >\r\n            \r\n            <MakeMultipleChoice updateQuestion={this.props.updateQuestion} description={this.props.data.description} question={this.props.data}  handleOk={this.handleOk} handleCancel={this.handleCancel}/>\r\n            </Modal>\r\n            </div>\r\n       \r\n        );\r\n      }\r\n    \r\n}\r\n","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/Select-From-dropdown/DropDown.js",["232"],"import React, { Component } from 'react'\r\nimport {Modal, Card, Menu, Dropdown} from \"antd\";\r\nimport { EditTwoTone, DeleteTwoTone} from \"@ant-design/icons\";\r\nimport EditDropDown from \"./EditDropDown\";\r\nexport default class DropDownSelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n         \r\n            visible: false,\r\n          };\r\n    }\r\n    showModal = () => {\r\n      this.setState({ visible: true });\r\n    };\r\n  \r\n    handleOk = () => {\r\n      this.setState({ visible: false });\r\n    };\r\n  \r\n    handleCancel = () => {\r\n      this.setState({ visible: false });\r\n    };\r\n\r\n    onDelete=()=>{\r\n      this.props.deleteQuestion(this.props.data.id);\r\n    }\r\n     isNumeric(str) {\r\n        if (typeof str != \"string\") return false // we only process strings!  \r\n        return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...\r\n               !isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail\r\n      }\r\n\r\n    onRenderDropdownQuestion=(quesNo, data)=> {\r\n        const dataArray = data.description.split(\"Dropdown#\");\r\n        let ansIndex=0;\r\n        return(<p style={{ fontSize: 17}}>{quesNo}. {\"  \"}\r\n            {dataArray.map((item, index)=>{\r\n               console.log(\"item: \", item);\r\n                if(item.includes(\"#\")){\r\n                    const deepItem=item.split(\"#\");\r\n                    console.log(\"deepItem: \", deepItem);\r\n                     return deepItem.map((item2)=>{\r\n                        if(this.isNumeric(item2[0])){\r\n                            ansIndex++;\r\n                            let count=ansIndex-1;\r\n                            // console.log(count)\r\n                        return(<Dropdown overlay={this.menu(data.options[count], data.ans[count], count)}>\r\n                            <a className=\"ant-dropdown-link\" onClick={e => e.preventDefault()}>\r\n                              -Select- \r\n                            </a>\r\n                          </Dropdown>);    \r\n                        }\r\n                        if(item2.includes(\"\\n\")){\r\n                            const item3 = item2.split(\"\\n\");\r\n                            return item3.map((i)=>{\r\n                                return(<><br/> {i}</>);\r\n                            })\r\n                        }\r\n                        return item2;\r\n                     })\r\n                    \r\n                }else{\r\n                    return item;\r\n                }\r\n            })}\r\n        </p>);\r\n    }\r\n     menu =(options, ans, count)=> {\r\n       console.log(options)\r\n         const optionsArr = options.split(\",\");\r\n            return <Menu>  {optionsArr.map((item,index)=>{\r\n                if(index === ans){\r\n                    return   <Menu.Item key={index} danger>{item}</Menu.Item>;\r\n                }else{\r\n                    return(\r\n                        \r\n                          <Menu.Item key={index}>\r\n                            \r\n                              {item}\r\n                          \r\n                          </Menu.Item>\r\n                        \r\n                        \r\n                      );\r\n                }\r\n            }\r\n            )}</Menu>;\r\n     };\r\n    render() {\r\n        return (\r\n            <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n      <Card\r\n        style={{ backgroundColor: this.props.color }}\r\n        actions={[\r\n          <EditTwoTone\r\n            onClick={() => {\r\n              this.showModal();\r\n            }}\r\n            twoToneColor=\"#52c41a\"\r\n            key=\"edit\"\r\n          />,\r\n          <DeleteTwoTone\r\n            onClick={() => {\r\n              this.onDelete();\r\n            }}\r\n            twoToneColor=\"#eb2f96\"\r\n            key=\"del\"\r\n          />,\r\n        ]}\r\n      >\r\n       {this.onRenderDropdownQuestion(this.props.quesNo, this.props.data)}\r\n      </Card>\r\n      <Modal\r\n        style={{ width: 1000 }}\r\n        title=\"Edit Question\"\r\n        visible={this.state.visible}\r\n        onCancel={() => this.handleCancel()}\r\n        width={1200}\r\n        footer={null}\r\n      >\r\n         <EditDropDown updateQuestion={this.props.updateQuestion} data={this.props.data} handleOk={this.handleOk} handleCancel={this.handleCancel}/> \r\n      </Modal>\r\n    </div>\r\n        )\r\n    }\r\n}\r\n","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/MultipleCheckbox/MultipleCheckboxTest.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/AddQuestion.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/Blanks/Blanks.js",["233","234"],"import React, { useState } from \"react\";\r\nimport { Modal, Card } from \"antd\";\r\nimport { DeleteTwoTone, EditTwoTone } from \"@ant-design/icons\";\r\nimport {EditFillInTheBlanks} from \"./EditFillInTheBlanks\";\r\nimport {MakeFillInTheBlanks} from \"./MakeFillInTheBlanks\";\r\nconst blankString = \"____\";\r\n\r\n\r\nconst myIncludes=(str)=>{\r\n    if(str.includes(\".\")){\r\n        return true;\r\n    }else if(str.includes(\",\")){\r\n        return true;\r\n    }else if(str.includes(\"'\")){\r\n        return true;\r\n    }else if(str.includes(\"\\\"\")){\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const Blanks = (props) => {\r\n // console.log(\"props: \",props.data);\r\n  const [visible, toggleModal] = useState(false);\r\n\r\n  const showModal = () => {\r\n    toggleModal(true);\r\n  };\r\n\r\n  const handleOk = () => {\r\n    toggleModal(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    toggleModal(false);\r\n  };\r\n  const onDelete = () => {\r\n    props.deleteQuestion(props.data.id);\r\n  };\r\n  const makeDescription = (desc) => {\r\n    //console.log(\"ans: \",props.data.ans[0]);\r\n    const array = desc.split(\" \");\r\n    let count = 0;\r\n    const result = array.map((item, index) => {\r\n      // console.log(index);\r\n      if((myIncludes(item)) &&  item.includes(\"____\")){\r\n        console.log(\"found: \", item);\r\n        if (item[item.length - 1] === \".\") {\r\n            \r\n            count=count+1\r\n          return (\r\n            <span style={{ color: \"#1890ff\", textDecoration: \"underline\" }}>\r\n              {props.data.ans[count-1]}\r\n              {\".\"}\r\n              \r\n            </span>\r\n          );\r\n        } else if (item[0] === \".\") {\r\n            console.log(\"found\");\r\n            count=count+1;\r\n            return (\r\n                <span style={{ color: \"#1890ff\", textDecoration: \"underline\" }}>.{\" \"} \r\n                  {props.data.ans[count-1]}\r\n                  \r\n                </span>\r\n              );\r\n        }else if (item[item.length - 1] === \",\") {\r\n            count=count+1;\r\n            return (\r\n              <span style={{ color: \"#1890ff\", textDecoration: \"underline\" }}>\r\n                {props.data.ans[count-1]}\r\n                {\",\"}\r\n                \r\n              </span>\r\n            );\r\n          } else if (item[0] === \",\") {\r\n            count=count+1;\r\n              return (\r\n                  <span style={{ color: \"#1890ff\", textDecoration: \"underline\" }}>,{\" \"} \r\n                    {props.data.ans[count-1]}\r\n                    \r\n                  </span>\r\n                );\r\n          }\r\n          \r\n      }else{ \r\n      if (item === blankString) {\r\n        count=count+1;\r\n        return (\r\n          <span style={{ color: \"#1890ff\", textDecoration: \"underline\" }}>\r\n            {props.data.ans[count-1]}{\" \"}\r\n           \r\n          </span>\r\n        );\r\n      } else if (item !== blankString) {\r\n        return <span>{item} </span>;\r\n      }\r\n    \r\n    }if(item.includes(\".\")){\r\n        count=count+1;\r\n        const arr= item.split(\".\");\r\n        if(arr[0]===blankString){\r\n            return(<>\r\n            <span style={{ color: \"#1890ff\", textDecoration: \"underline\" }}>\r\n            {props.data.ans[count-1]}\r\n            \r\n          </span>. {arr[1]} {\" \"}</>);\r\n        }else{\r\n            return(\r\n            <>{arr[0]}.\r\n            <span style={{ color: \"#1890ff\", textDecoration: \"underline\" }}>\r\n            {props.data.ans[count-1]} {\" \"}\r\n            \r\n          </span>\r\n          </>);\r\n        }\r\n    }\r\n    if(item.includes(\",\")){\r\n        count=count+1;\r\n        const arr= item.split(\",\");\r\n        if(arr[0]===blankString){\r\n            return(<>\r\n            <span style={{ color: \"#1890ff\", textDecoration: \"underline\" }}>\r\n            {props.data.ans[count-1]}\r\n            \r\n          </span>, {arr[1]} {\" \"}</>);\r\n        }else{\r\n            return(\r\n            <>{arr[0]},\r\n            <span style={{ color: \"#1890ff\", textDecoration: \"underline\" }}>\r\n            {props.data.ans[count-1]} {\" \"}\r\n            \r\n          </span>\r\n          </>);\r\n        }\r\n    }\r\n     \r\n    });\r\n\r\n\r\n     //console.log(\"last result\");\r\n    return result;\r\n  };\r\n  return (\r\n    <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n      <Card\r\n        style={{ backgroundColor: props.color }}\r\n        actions={[\r\n          <EditTwoTone\r\n            onClick={() => {\r\n              showModal();\r\n            }}\r\n            twoToneColor=\"#52c41a\"\r\n            key=\"edit\"\r\n          />,\r\n          <DeleteTwoTone\r\n            onClick={() => {\r\n              onDelete();\r\n            }}\r\n            twoToneColor=\"#eb2f96\"\r\n            key=\"del\"\r\n          />,\r\n        ]}\r\n      >\r\n        <p style={{ fontSize: 17 }}>\r\n         \r\n          {props.quesNo}. {makeDescription(props.data.description)}\r\n        </p>\r\n      </Card>\r\n      <Modal\r\n        style={{ width: 1000 }}\r\n        title=\"Edit Question\"\r\n        visible={visible}\r\n        onCancel={() => handleCancel()}\r\n        width={1200}\r\n        footer={null}\r\n      >\r\n         <MakeFillInTheBlanks updateQuestion={props.updateQuestion} description={props.data.description} data={props.data} handleOk={handleOk} handleCancel={handleCancel}/> \r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/redux/actions/QuestionActions.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/MultipleCheckbox/MultipleCheckbox.js",["235","236"],"import React, { Component } from 'react'\nimport { Radio,  Card, Modal,Checkbox, Row,Col  } from 'antd';\nimport { EditTwoTone,  DeleteTwoTone } from '@ant-design/icons';\n// import EditMultipleChoice from \"./EditMultipleChoice\";\nimport MakeMultipleCheckbox from \"./MakeMultipleCheckbox\"\nexport default class MultipleCheckbox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: 1,\n            visible: false,\n          };\n    }\n    showModal = () => {\n      this.setState({ visible: true });\n    };\n  \n    handleOk = () => {\n      this.setState({ visible: false });\n    };\n  \n    handleCancel = () => {\n      this.setState({ visible: false });\n    };\n\n    onDelete=()=>{\n      this.props.deleteQuestion(this.props.data.id);\n    }\n      onChange = e => {\n        //console.log('radio checked', e.target.value);\n        this.setState({\n          value: e.target.value,\n        });\n      };\n    render() {\n        const radioStyle = {\n          display: 'block',\n          height: '30px',\n          lineHeight: '30px',\n        };\n        \n        // const { value } = this.state;\n        return (\n            <div  className=\"col-12 col-sm-10 offset-sm-1\">\n                <Card style={{backgroundColor:this.props.color}}\n                  actions={[\n                    \n                    <EditTwoTone onClick={()=>{this.showModal();}} twoToneColor=\"#52c41a\"   key=\"edit\" />,\n                    <DeleteTwoTone onClick={()=>{this.onDelete();}} twoToneColor=\"#eb2f96\" key=\"del\"/>,\n                  ]}>\n        <p style={{ fontSize: 17}}>{this.props.quesNo}. {this.props.data.description}</p>\n                <Checkbox.Group value={this.props.data.ans}>\n                <Row>\n                    {this.props.data.options.map(index=>{\n                      \n                        return(\n                            <Checkbox key={index} style={radioStyle} value={index}>\n                            {index}\n                          </Checkbox>\n                        );\n                        \n                    })}\n                </Row>\n           \n                      \n          </Checkbox.Group>\n                </Card>\n            <Modal\n              style={{ width: 1000 }}\n              title=\"Edit Question\"\n              visible={this.state.visible}\n              onCancel={this.handleCancel}\n              width={1200}\n              footer={null}\n            >\n            \n            <MakeMultipleCheckbox updateQuestion={this.props.updateQuestion} question={this.props.data} description={this.props.data.description} handleOk={this.handleOk} handleCancel={this.handleCancel}/>\n            </Modal>\n            </div>\n       \n        );\n      }\n    \n}\n","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/SequenceInOrder/SequenceInTest.js",["237"],"import React, {Component} from 'react';\nimport { Card,  List } from 'antd';\nimport classes from './SequenceInOrder.module.css';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nclass SequenceInTest extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: 1,\n            visible: false,\n            mydata: this.props.data.options,\n          };\n    }\n    handleOnDragEnd = (result) =>{\n        if (!result.destination) return;\n        console.log(result)\n        const items = Array.from(this.state.mydata);\n        \n        const [reorderedItem] = items.splice(result.source.index, 1);\n        console.log(reorderedItem)\n        items.splice(result.destination.index, 0, reorderedItem);\n        console.log(items)\n        this.setState({mydata: items})\n        \n        \n    }\n\n    render(){\n\n        return(\n            <div  className=\"col-12 col-sm-10 offset-sm-1\">\n                <Card style={{backgroundColor:this.props.color}}\n                  >\n        <p style={{ fontSize: 17}}>{this.props.quesNo}. {this.props.data.description}</p>\n            {/* </div> */}\n            <DragDropContext onDragEnd={this.handleOnDragEnd}>\n            <Droppable droppableId=\"characters\" >\n    {(provided) => (\n            <ol className = \"characters\" {...provided.droppableProps} ref={provided.innerRef}>\n            {this.state.mydata.map(index=>{\n                console.log(index.split(\",,\"))\n                // let x = 123 \n                // let lala = index.split(\",,\")\n                // {this.props.data.options.indexOf(index)}\n                return(\n                    <Draggable key = {index} draggableId={index} index= {this.state.mydata.indexOf(index)}>\n                    {(provided) => (\n                    <li className={classes.MyListDiv} ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>{index}\n                   {/* </List.Item> */}\n                   </li>\n                    // </div>\n                     )}\n                     </Draggable>\n                    \n            )\n                  \n            })}\n            {/* </List> */}\n            {provided.placeholder}\n            </ol>\n            )}\n            </Droppable>\n            </DragDropContext>\n            \n            </Card>\n            </div>\n        )\n    }\n}\n// <div className={classes.MyListDiv}>\n// {/* <div > */}\n// {/* <List.Item */}\n\nexport default SequenceInTest;\n\n","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/MatchingWords/MatchingWordsTest.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/SequenceInOrder/SequenceInOrder.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/MatchingWords/MatchingWords.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Options.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/Blanks/EditFillInTheBlanks.js",["238"],"import React, {useState, useEffect} from 'react'\r\nimport {Button, Divider, Input} from \"antd\";\r\nimport {DeleteTwoTone} from \"@ant-design/icons\";\r\nimport Joi from \"joi-browser\";\r\nimport \"./Blanks.css\";\r\nimport * as Schemas from \"../../Schemas/BlanksSchema\";\r\nconst errorStyleText = {\r\n    color: \"#eb2f96\",\r\n  };\r\n  const { TextArea } = Input;\r\n  const blankString=\"____\";\r\nexport   const EditFillInTheBlanks = (props) => {\r\n    const [question, setQuestion] = useState({\r\n       \r\n        category: \"Fill in the Blanks\",\r\n        description: props.data.description,\r\n        options: props.data.ans,\r\n        ans: [],\r\n        \r\n        descriptionError: \"\",\r\n        blankValue: \"\",\r\n        bankValueError: \"\",\r\n    });\r\n\r\n    \r\n    const deleteBlankInDescription=(index)=>{\r\n      console.log(\"index: \", index)\r\n      let desc=question.description;\r\n      const arr = desc.split(\"\");\r\n      let newArr=[];\r\n      let count=0;\r\n      let dashcount=0;\r\n      arr.forEach((item)=>{\r\n     \r\n        if(item === \"_\"){\r\n          console.log(\"dash\");\r\n          if(index===count){\r\n           \r\n\r\n          }else{\r\n            dashcount++;\r\n            newArr.push(item);\r\n           \r\n          }\r\n            \r\n\r\n        }else{\r\n          if(dashcount===4){\r\n            count++;\r\n            dashcount=0;\r\n          }\r\n        \r\n          newArr.push(item);\r\n        }\r\n      });\r\n     \r\n    \r\n      const newDesc= newArr.join(\"\");\r\n      return newDesc;\r\n    };\r\n   const onDelete = (option, i) => {\r\n        let options = question.options;\r\n        const index = options.indexOf(option);\r\n        if (index > -1) {\r\n          options.splice(index, 1);\r\n        }\r\n       const desc= deleteBlankInDescription(i);\r\n       \r\n        setQuestion({ ...question,options: options, description: desc });\r\n      };\r\n    const renderOptions = () => {\r\n  \r\n      const {options}= question;\r\n      const onBlankValueChange=(e,index)=>{\r\n          const value = e.target.value;\r\n          let questionOption = question.options;\r\n          questionOption[index]= value;\r\n          setQuestion({ ...question,options: questionOption});\r\n\r\n      };\r\n        return options.map((item, index) => {\r\n          return (\r\n            <div style={{ marginTop: 7 }} id={item} className=\"row\">\r\n              <div className=\"col-5 col-sm-5 offset-sm-1\">\r\n               <Input onChange={(e)=>{onBlankValueChange(e,index);}} value={item}/>\r\n              </div>\r\n              <div className=\"col-2 col-sm-1 \">\r\n                <Button onClick={() => onDelete(item, index)}>\r\n                  {\" \"}\r\n                  <span>\r\n                    <DeleteTwoTone twoToneColor=\"#eb2f96\" />\r\n                  </span>\r\n                </Button>\r\n              </div>\r\n              {/* <div className=\"col-2 col-sm-1 \">\r\n           \r\n             <Button> <span><EditTwoTone twoToneColor=\"#52c41a\" /></span></Button>\r\n         \r\n            </div> */}\r\n            </div>\r\n          );\r\n        });\r\n      };\r\n  \r\nconst         onAddBlank=()=>{\r\n    if(question.blankValue){\r\n        const found = question.options.some(\r\n            (item) => item.toUpperCase() === question.blankValue.toUpperCase()\r\n          );\r\n          if (!found) {\r\n              let updateDesc= question.description;\r\n              \r\n              updateDesc= updateDesc.concat(blankString);\r\n\r\n            setQuestion({ ...question,options:question.options.concat(question.blankValue),blankValueError: \"\", description: updateDesc});\r\n\r\n          } else {\r\n              setQuestion({ ...question, blankValueError: \"Already exists\"})\r\n            \r\n          }\r\n    }else{\r\n        setQuestion({ ...question, blankValueError: \"Please enter Value and then Press Button !\"})\r\n    }\r\n};\r\n\r\n\r\nconst onAddQuestion = () => {\r\n    if (question.options.length > 0) {\r\n      // options are present\r\n      const result = Joi.validate(\r\n        { description: question.description },\r\n        Schemas.description\r\n      );\r\n      if (result.error) {\r\n        setQuestion({ ...question,\r\n          descriptionError: result.error.details[0].message,\r\n          optionsError: \"\",\r\n        });\r\n      } else {\r\n        setQuestion({  ...question, descriptionError: \"\", optionsError: \"\" });\r\n        \r\n          //      ADD to DATABASE\r\n          // Closing modal\r\n          const ans=question.options;\r\n         \r\n          const data={category: \"Fill in the Blanks\", description: question.description, options: [], ans: ans, id: props.data.id};\r\n          props.updateQuestion(data);\r\n          props.handleOk();\r\n    \r\n\r\n        \r\n      }\r\n    } else {\r\n      // options error : no option present\r\n      setQuestion({ ...question, optionsError: \"Please add atleast one option\" });\r\n    }\r\n  };\r\n \r\n    return (\r\n        <>\r\n        <div className=\"row no-gutters\">\r\n          <div  className=\"col-12 col-sm-7 offset-sm-1 bankValueStyle\">\r\n            <Input\r\n              placeholder=\"Enter Blank Value Here\"\r\n              value={question.blankValue}\r\n              onChange={(e) => {\r\n                setQuestion({ ...question,blankValue: e.target.value});\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"col-12 col-sm-3 \">\r\n            <Button\r\n              className=\"add-blank\"\r\n              style={{ marginLeft: 0 }}\r\n              block\r\n              type=\"primary\"\r\n              success\r\n              onClick={()=>{onAddBlank();}}\r\n            >\r\n              {\" \"}\r\n              Add Blank\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n            <p style={errorStyleText}>{question.blankValueError}</p>\r\n          </div>\r\n        </div>\r\n        <br/>\r\n         <div className=\"row\">\r\n          <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n            <TextArea\r\n              placeholder=\"Enter Your Question\"\r\n              value={question.description}\r\n              onChange={(e)=>setQuestion({...question,description: e.target.value})}\r\n              rows={4}\r\n            />\r\n          </div>\r\n        </div>\r\n        <br/>\r\n        {renderOptions()}\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n            <p style={errorStyleText}>{question.descriptionError}</p>\r\n          </div>\r\n        </div>\r\n        <Divider />\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-sm-2 offset-sm-7\">\r\n            <Button block\r\n              onClick={() => {\r\n                props.handleCancel();\r\n              }}\r\n              style={{marginTop: 7}}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n          <div className=\"col-12 col-sm-3 \">\r\n            <Button block\r\n              onClick={() => {\r\n                onAddQuestion();\r\n              }}\r\n              type=\"primary\"\r\n              style={{marginTop: 7}}\r\n            >\r\n              Update\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/Select-From-dropdown/EditDropDown.js",["239","240","241"],"import React, { Component } from \"react\";\r\nimport AddQuestionFooter from \"../../AddQuestionFooter\";\r\nimport { Button, Input, Checkbox } from \"antd\";\r\nimport {\r\n  CloseCircleTwoTone,\r\n  PlusOutlined,\r\n  DeleteTwoTone,\r\n} from \"@ant-design/icons\";\r\nimport \"./Styles.css\";\r\nimport { ERROR_COLOR } from \"../../../util/colors\";\r\nimport * as CategoryTypes from \"../../../util/Categories\";\r\nconst { TextArea } = Input;\r\nexport default class EditDropDown extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      description: this.props.data.description,\r\n      options: this.props.data.options,\r\n      addOptionFields: [],\r\n      addOptionFieldsError: [],\r\n\r\n      ans: this.props.data.ans,\r\n\r\n      ansError: \"\",\r\n      descriptionError: \"\",\r\n    };\r\n  }\r\n\r\n  onAddQuestion = () => {\r\n    if(this.state.description.length === 0){\r\n        this.setState({descriptionError: \"Description cannot be Empty!\"});\r\n    }else{\r\n      var temp = this.state.description;\r\n      var dropdownCount = (temp.match(/Dropdown/g) || []).length;\r\n      var optionCount= this.state.options.length;\r\n      if(dropdownCount > optionCount){\r\n          this.setState({descriptionError: \"Count of Dropdown is not equal\"});\r\n      }else if(dropdownCount === optionCount){\r\n        if(optionCount>0){\r\n          const data={category: CategoryTypes.SELECT_FROM_DROPDOWN, description: this.state.description, options: this.state.options, ans: this.state.ans, id : this.props.data.id};\r\n          //console.log(\"data: \", data);\r\n          this.props.updateQuestion(data);\r\n          this.props.handleOk();\r\n        }else{\r\n          this.setState({descriptionError: \"Add atleast one Dropdown\"});\r\n        }\r\n      }\r\n      else{\r\n          this.setState({descriptionError: \"Count of Dropdown is not equal\"});\r\n      }\r\n    }\r\n}\r\n_handleKeyDown = (e) => {\r\n \r\n}\r\n  onChangeDescription = (e) => {\r\n    let value = e.target.value;\r\n    if (e.key === 'Enter') {\r\n     // console.log('do validate');\r\n    \r\n      value= value + \"\\n\";\r\n      //console.log(\"value: \",value);\r\n      this.setState({ description: value });\r\n    }\r\n    console.log(value);\r\n    this.setState({ description: value });\r\n  };\r\n  onEnterOptionValue = (index, e) => {\r\n    const value = e.target.value;\r\n    let newArr = this.state.addOptionFields.splice();\r\n    newArr[index] = value;\r\n    this.setState({ addOptionFields: newArr });\r\n  };\r\n  onOptionChangeValue = (e, index, optionIndex) => {\r\n    const value = e.target.value;\r\n    let optionArray = this.state.options[index].split(\",\");\r\n    optionArray[optionIndex] = value;\r\n    let newOptionArray = optionArray.join(\",\");\r\n    optionArray = this.state.options;\r\n    optionArray[index] = newOptionArray;\r\n    this.setState({ options: optionArray });\r\n  };\r\n  onDeleteOptionValue = (index, optionIndex) => {\r\n    let optionValue = this.state.options[index].split(\",\");\r\n    let del = optionValue.splice(optionIndex, 1);\r\n    let options = this.state.options;\r\n    if (optionIndex === this.state.ans[index]) {\r\n      //if we remove checked then make ans 0 index\r\n      let ans = this.state.ans;\r\n      ans[index] = 0;\r\n      this.setState({ ans });\r\n    }\r\n\r\n    if (optionIndex < this.state.ans[index]) {\r\n      let ans = this.state.ans;\r\n      let ansValue = this.state.ans[index];\r\n      // console.log(\"ans value: \", ansValue);\r\n      ans[index] = ansValue - 1;\r\n      this.setState({ ans });\r\n    }\r\n    const newOptionValue = optionValue.join(\",\");\r\n    options[index] = newOptionValue;\r\n    this.setState({ options: options });\r\n  };\r\n  onChangeCheckedOptionValue = (index, optionIndex) => {\r\n    let ans = this.state.ans;\r\n    ans[index] = optionIndex;\r\n    this.setState({ ans: ans });\r\n  };\r\n  onAddOptionValueBtn = (index) => {\r\n    const value = this.state.addOptionFields[index];\r\n    let addOptionFields = this.state.addOptionFields;\r\n    //addOptionFields--->index\r\n\r\n    //if emty display errors\r\n\r\n    if (value.length === 0) {\r\n      let err = \"Please Enter Value and then Add\";\r\n      let addOptionFieldsError = this.state.addOptionFieldsError;\r\n      addOptionFieldsError[index] = err;\r\n      this.setState({ addOptionFieldsError });\r\n      setTimeout(() => {\r\n        addOptionFieldsError = this.state.addOptionFieldsError;\r\n        addOptionFieldsError[index] = \"\";\r\n        this.setState({ addOptionFieldsError });\r\n      }, 2000);\r\n    } else {\r\n      //check if same exists\r\n      let optionsValue = this.state.options[index].split(\",\");\r\n      if (optionsValue.includes(value)) {\r\n        let err = \"Already Exists\";\r\n        let addOptionFieldsError = this.state.addOptionFieldsError;\r\n        addOptionFieldsError[index] = err;\r\n        this.setState({ addOptionFieldsError });\r\n        setTimeout(() => {\r\n          addOptionFieldsError = this.state.addOptionFieldsError;\r\n          addOptionFieldsError[index] = \"\";\r\n          this.setState({ addOptionFieldsError });\r\n        }, 2000);\r\n      } else {\r\n          if(optionsValue[0]===\"\"){\r\n              optionsValue[0]=value;\r\n              const newOptionsValue = optionsValue.join(\",\");\r\n        const options = this.state.options;\r\n        options[index] = newOptionsValue;\r\n\r\n        addOptionFields[index]=\"\";\r\n        this.setState({ options, addOptionFields });\r\n          }else{\r\n        optionsValue.push(value);\r\n        const newOptionsValue = optionsValue.join(\",\");\r\n        const options = this.state.options;\r\n        options[index] = newOptionsValue;\r\n\r\n        addOptionFields[index]=\"\";\r\n        this.setState({ options, addOptionFields });\r\n        // adding to options //\r\n          }\r\n      }\r\n    }\r\n  };\r\n\r\n  onDeleteDropDown = (index) => {\r\n    let { ans, options, addOptionFields, addOptionFieldsError, description} = this.state;\r\n    ans.splice(index,1);\r\n   \r\n    options.splice(index,1);\r\n    addOptionFields.splice(index,1);\r\n    addOptionFieldsError.splice(index,1);\r\n    const str= \"#\"+(index+1)+\" Dropdown#\";\r\n    const newDesc=description.split(str).join(\"\");\r\n    let count=1; let first=true; let skip=false;\r\n    let finalDesc=newDesc.split(\"Dropdown#\");\r\n    let Desc=[];\r\n  //  console.log(\"newDesc: \", newDesc);\r\n    //console.log(\"finaldescBefore: \", finalDesc);//\r\n    finalDesc.forEach((item,index)=>{\r\n      \r\n         const length= item.length;\r\n       \r\n         if(item.length>1){\r\n             let n=length-3;\r\n            \r\n             if(item[n]===\"#\"){\r\n                 n++;\r\n                 let str=item.split(\"\");\r\n                 str[n]=count+\"\";\r\n                 let newStr=str.join(\"\");\r\n                 count++;\r\n                // console.log(\"str: \", newStr);\r\n                 Desc.push(newStr);\r\n            \r\n             }else{\r\n               // console.log(\"item: \", item);\r\n                Desc.push(item);\r\n             }\r\n\r\n         }else{\r\n          //  console.log(\"item: \", item);\r\n            Desc.push(item);\r\n         }\r\n  \r\n    });\r\n \r\n    let finaldescription= Desc.join(\"Dropdown#\");\r\n    if(Desc.length===1){\r\n        var c = (finaldescription.match(/Dropdown/g) || []).length;\r\n        var f = (finaldescription.match(/#/g) || []).length;\r\n        if(c===0 && f===1){\r\n        finaldescription=finaldescription+\"Dropdown#\";}\r\n    }\r\n  \r\n    this.setState({ans, options, addOptionFields, addOptionFieldsError, description: finaldescription});\r\n  }\r\n\r\n  onAddDropdown = () => {\r\n        let {description, ans, options, addOptionFields, addOptionFieldsError} = this.state;\r\n        let length = this.state.options.length;\r\n        description = description + \" #\"+(length+1)+\" Dropdown#\";\r\n        ans[length]=0;\r\n        options[length]=\"\";\r\n        addOptionFields[length]=\"\";\r\n        addOptionFieldsError[length]=\"\";\r\n        this.setState({description, ans, options, addOptionFields, addOptionFieldsError});\r\n  }\r\n\r\n  renderAddDropdownSection = (item, index) => {\r\n    const optionArray = item.split(\",\"); //1,2,3\r\n    return (\r\n      <div style={{textAlign: \"center\"}} className=\"col-11 col-sm-4 offset-sm-1 dropdown-container-style\">\r\n        <div id=\"box\">\r\n          <Button onClick={()=>{this.onDeleteDropDown(index);}} type=\"text\" id=\"icon-delete-dropdown\">\r\n            <span>\r\n              <CloseCircleTwoTone\r\n                style={{ fontSize: 20 }}\r\n                twoToneColor=\"#eb2f96\"\r\n              />\r\n            </span>\r\n          </Button>\r\n        </div>\r\n        {/* input field and add button */}\r\n        <h5 style={{margin : 7}}>Dropdown #{index+1}</h5>\r\n        <div\r\n          style={{ marginTop: 10 }}\r\n          className=\"row no-gutters enter-option-value-container\"\r\n        >\r\n          <div className=\"enter-option-value-input\">\r\n            <Input\r\n              value={this.state.addOptionFields[index]}\r\n              onChange={(e) => this.onEnterOptionValue(index, e)}\r\n              placeholder=\"Enter Option Value to Add\"\r\n            />\r\n          </div>\r\n          <div className=\"enter-option-value-add-btn\">\r\n            <Button\r\n              onClick={() => {\r\n                this.onAddOptionValueBtn(index);\r\n              }}\r\n              type=\"primary\"\r\n            >\r\n              <span>\r\n                <PlusOutlined\r\n                  style={{\r\n                    color: \"white\",\r\n                    verticalAlign: \"baseline\",\r\n                    fontSize: 18,\r\n                  }}\r\n                />\r\n              </span>\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        {/* error row */}\r\n        <div className=\"row no-gutters\">\r\n          <p style={{ color: ERROR_COLOR }}>\r\n            {this.state.addOptionFieldsError[index]}\r\n          </p>\r\n        </div>\r\n        {/* List of options */}\r\n\r\n        {this.state.options[index] !== \"\"\r\n          ? optionArray.map((item, optionIndex) => {\r\n              let checked = false;\r\n              if (optionIndex === this.state.ans[0]) {\r\n                checked = true;\r\n              }\r\n              return (\r\n                <div className=\"row \">\r\n                  <div className=\"checkbox-div\">\r\n                    <Button type=\"text\">\r\n                      <Checkbox\r\n                        checked={checked}\r\n                        onChange={(e) => {\r\n                          this.onChangeCheckedOptionValue(index, optionIndex);\r\n                        }}\r\n                      />\r\n                    </Button>\r\n                  </div>\r\n                  <div className=\"option-value-div\">\r\n                    <Input\r\n                      value={item}\r\n                      onChange={(e) => {\r\n                        this.onOptionChangeValue(e, index, optionIndex);\r\n                      }}\r\n                      placeholder=\"Option Value\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"option-value-delete-div\">\r\n                    <Button\r\n                      onClick={() => {\r\n                        this.onDeleteOptionValue(index, optionIndex);\r\n                      }}\r\n                    >\r\n                      <span>\r\n                        <DeleteTwoTone\r\n                          twoToneColor=\"#eb2f96\"\r\n                          style={{ verticalAlign: \"baseline\" }}\r\n                        />{\" \"}\r\n                      </span>\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          : null}\r\n      </div>\r\n    );\r\n  };\r\n  render() {\r\n    // console.log(this.state.ans);\r\n    return (\r\n      <>\r\n        <div>\r\n          {/* <h1>Select from Dropdown</h1> */}\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n            <TextArea\r\n              placeholder=\"Enter Your Question\"\r\n              value={this.state.description}\r\n              onChange={this.onChangeDescription}\r\n              rows={4}\r\n              onKeyDown={this._handleKeyDown}\r\n            />\r\n          </div>\r\n          <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n            <p style={{ color: ERROR_COLOR }}>\r\n                {this.state.descriptionError}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n            <div  className=\"col-12 col-sm-10 offset-sm-1\">\r\n                <div >\r\n                <Button onClick={()=>this.onAddDropdown()} type=\"primary\" style={{position: \"absolute\", right :13}}>Add Dropdown</Button>\r\n                </div>\r\n                \r\n            </div>\r\n        </div>\r\n        <br/><br/>\r\n        <div className=\"row\">\r\n          {this.state.options.map((item, index) => {\r\n            return <>{this.renderAddDropdownSection(item, index)}</>;\r\n          })}\r\n        </div>\r\n        <AddQuestionFooter\r\n            type=\"Update\"\r\n          handleCancel={this.props.handleCancel}\r\n          handleOk={this.onAddQuestion}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/TrueAndFalse/EditTrueFalse.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/util/colors.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/Blanks/MakeFillInTheBlanks.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/modals/CustomTime.js",["242"],"import { Modal, Button, InputNumber, Form } from 'antd';\r\nimport React from \"react\";\r\nconst formItemLayout = {\r\n    labelCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 5 },\r\n    },\r\n    wrapperCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 12 },\r\n    },\r\n  };\r\nexport default class CustomTime extends React.Component {\r\n \r\n\r\n  \r\n\r\n  render() {\r\n    const { visible, loading } = this.props;\r\n    return (\r\n      <>\r\n        \r\n        <Modal\r\n          visible={visible}\r\n          title=\"Custom Time\"\r\n          onOk={this.props.handleOk}\r\n          onCancel={this.props.handleCancel}\r\n          footer={[\r\n            <Button key=\"back\" onClick={this.props.handleCancel}>\r\n              Return\r\n            </Button>,\r\n            <Button key=\"submit\" type=\"primary\" loading={loading} onClick={this.props.handleOk}>\r\n              Submit\r\n            </Button>,\r\n          ]}\r\n        >\r\n          {/* <p>Some contents...</p>\r\n          <p>Some contents...</p>\r\n          <p>Some contents...</p>\r\n          <p>Some contents...</p>\r\n          <p>Some contents...</p> */}\r\n          <Form {...this.formItemLayout}>\r\n         \r\n         <Form.Item  hasFeedback validateStatus=\"success\">\r\n           <InputNumber onChange={(val)=> {this.props.onChange(val)}} value={this.props.time}  style={{ width: '100%' }} />\r\n         </Form.Item>\r\n               </Form>\r\n             \r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n}\r\n",["243","244"],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/modals/CustomScore.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/Multiple Choice/MakeMultipleChoice.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/MultipleCheckbox/MakeMultipleCheckbox.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/MatchingWords/MakeMatchingWords.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/SequenceInOrder/MakeSequenceInOrder.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/TrueAndFalse/MakeTrueFalse.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/Select-From-dropdown/MakeDropDown.js",["245","246","247"],"import React, { Component } from \"react\";\r\nimport AddQuestionFooter from \"../../AddQuestionFooter\";\r\nimport { Button, Input, Checkbox } from \"antd\";\r\nimport {\r\n  CloseCircleTwoTone,\r\n  PlusOutlined,\r\n  DeleteTwoTone,\r\n} from \"@ant-design/icons\";\r\nimport \"./Styles.css\";\r\nimport { ERROR_COLOR } from \"../../../util/colors\";\r\nimport * as CategoryTypes from \"../../../util/Categories\";\r\nconst { TextArea } = Input;\r\nexport default class MakeDropDown extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      description: \"\",\r\n      options: [],\r\n      addOptionFields: [],\r\n      addOptionFieldsError: [],\r\n\r\n      ans: [],\r\n\r\n      ansError: \"\",\r\n      descriptionError: \"\",\r\n    };\r\n  }\r\n\r\n  onAddQuestion = () => {\r\n      if(this.state.description.length === 0){\r\n          this.setState({descriptionError: \"Description cannot be Empty!\"});\r\n      }else{\r\n        var temp = this.state.description;\r\n        var dropdownCount = (temp.match(/Dropdown/g) || []).length;\r\n        var optionCount= this.state.options.length;\r\n        if(dropdownCount > optionCount){\r\n            this.setState({descriptionError: \"Count of Dropdown is not equal\"});\r\n        }else if(dropdownCount === optionCount){\r\n          if(optionCount>0){\r\n            const data={category: CategoryTypes.SELECT_FROM_DROPDOWN, description: this.state.description, options: this.state.options, ans: this.state.ans};\r\n           // console.log(\"data: \", data);\r\n            this.props.addQuestion(data);\r\n            this.props.handleOk();\r\n          }else{\r\n            this.setState({descriptionError: \"Add atleast one Dropdown\"});\r\n          }\r\n        }\r\n        else{\r\n            this.setState({descriptionError: \"Count of Dropdown is not equal\"});\r\n        }\r\n      }\r\n    \r\n  };\r\n  onChangeDescription = (e) => {\r\n    let value = e.target.value;\r\n    if (e.key === 'Enter') {\r\n     // console.log('do validate');\r\n    \r\n      value= value + \"\\n\";\r\n      //console.log(\"value: \",value);\r\n      this.setState({ description: value });\r\n    }\r\n    console.log(value);\r\n    this.setState({ description: value });\r\n  };\r\n  onEnterOptionValue = (index, e) => {\r\n    const value = e.target.value;\r\n    let newArr = this.state.addOptionFields.splice();\r\n    newArr[index] = value;\r\n    this.setState({ addOptionFields: newArr });\r\n  };\r\n  onOptionChangeValue = (e, index, optionIndex) => {\r\n    const value = e.target.value;\r\n    let optionArray = this.state.options[index].split(\",\");\r\n    optionArray[optionIndex] = value;\r\n    let newOptionArray = optionArray.join(\",\");\r\n    optionArray = this.state.options;\r\n    optionArray[index] = newOptionArray;\r\n    this.setState({ options: optionArray });\r\n  };\r\n  onDeleteOptionValue = (index, optionIndex) => {\r\n    let optionValue = this.state.options[index].split(\",\");\r\n    let del = optionValue.splice(optionIndex, 1);\r\n    let options = this.state.options;\r\n    if (optionIndex === this.state.ans[index]) {\r\n      //if we remove checked then make ans 0 index\r\n      let ans = this.state.ans;\r\n      ans[index] = 0;\r\n      this.setState({ ans });\r\n    }\r\n\r\n    if (optionIndex < this.state.ans[index]) {\r\n      let ans = this.state.ans;\r\n      let ansValue = this.state.ans[index];\r\n      // console.log(\"ans value: \", ansValue);\r\n      ans[index] = ansValue - 1;\r\n      this.setState({ ans });\r\n    }\r\n    const newOptionValue = optionValue.join(\",\");\r\n    options[index] = newOptionValue;\r\n    this.setState({ options: options });\r\n  };\r\n  onChangeCheckedOptionValue = (index, optionIndex) => {\r\n    let ans = this.state.ans;\r\n    ans[index] = optionIndex;\r\n    this.setState({ ans: ans });\r\n  };\r\n  onAddOptionValueBtn = (index) => {\r\n    const value = this.state.addOptionFields[index];\r\n    let addOptionFields = this.state.addOptionFields;\r\n    //addOptionFields--->index\r\n\r\n    //if emty display errors\r\n\r\n    if (value.length === 0) {\r\n      let err = \"Please Enter Value and then Add\";\r\n      let addOptionFieldsError = this.state.addOptionFieldsError;\r\n      addOptionFieldsError[index] = err;\r\n      this.setState({ addOptionFieldsError });\r\n      setTimeout(() => {\r\n        addOptionFieldsError = this.state.addOptionFieldsError;\r\n        addOptionFieldsError[index] = \"\";\r\n        this.setState({ addOptionFieldsError });\r\n      }, 2000);\r\n    } else {\r\n      //check if same exists\r\n      let optionsValue = this.state.options[index].split(\",\");\r\n      if (optionsValue.includes(value)) {\r\n        let err = \"Already Exists\";\r\n        let addOptionFieldsError = this.state.addOptionFieldsError;\r\n        addOptionFieldsError[index] = err;\r\n        this.setState({ addOptionFieldsError });\r\n        setTimeout(() => {\r\n          addOptionFieldsError = this.state.addOptionFieldsError;\r\n          addOptionFieldsError[index] = \"\";\r\n          this.setState({ addOptionFieldsError });\r\n        }, 2000);\r\n      } else {\r\n          if(optionsValue[0]===\"\"){\r\n              optionsValue[0]=value;\r\n              const newOptionsValue = optionsValue.join(\",\");\r\n        const options = this.state.options;\r\n        options[index] = newOptionsValue;\r\n\r\n        addOptionFields[index]=\"\";\r\n        this.setState({ options, addOptionFields });\r\n          }else{\r\n        optionsValue.push(value);\r\n        const newOptionsValue = optionsValue.join(\",\");\r\n        const options = this.state.options;\r\n        options[index] = newOptionsValue;\r\n\r\n        addOptionFields[index]=\"\";\r\n        this.setState({ options, addOptionFields });\r\n        // adding to options //\r\n          }\r\n      }\r\n    }\r\n  };\r\n\r\n  onDeleteDropDown = (index) => {\r\n    let { ans, options, addOptionFields, addOptionFieldsError, description} = this.state;\r\n    ans.splice(index,1);\r\n   \r\n    options.splice(index,1);\r\n    addOptionFields.splice(index,1);\r\n    addOptionFieldsError.splice(index,1);\r\n    const str= \"#\"+(index+1)+\" Dropdown#\";\r\n    const newDesc=description.split(str).join(\"\");\r\n    let count=1; let first=true; let skip=false;\r\n    let finalDesc=newDesc.split(\"Dropdown#\");\r\n    let Desc=[];\r\n  //  console.log(\"newDesc: \", newDesc);\r\n    //console.log(\"finaldescBefore: \", finalDesc);//\r\n    finalDesc.forEach((item,index)=>{\r\n      \r\n         const length= item.length;\r\n       \r\n         if(item.length>1){\r\n             let n=length-3;\r\n            \r\n             if(item[n]===\"#\"){\r\n                 n++;\r\n                 let str=item.split(\"\");\r\n                 str[n]=count+\"\";\r\n                 let newStr=str.join(\"\");\r\n                 count++;\r\n                // console.log(\"str: \", newStr);\r\n                 Desc.push(newStr);\r\n            \r\n             }else{\r\n               // console.log(\"item: \", item);\r\n                Desc.push(item);\r\n             }\r\n\r\n         }else{\r\n          //  console.log(\"item: \", item);\r\n            Desc.push(item);\r\n         }\r\n  \r\n    });\r\n \r\n    let finaldescription= Desc.join(\"Dropdown#\");\r\n    if(Desc.length===1){\r\n        var c = (finaldescription.match(/Dropdown/g) || []).length;\r\n        var f = (finaldescription.match(/#/g) || []).length;\r\n        if(c===0 && f===1){\r\n        finaldescription=finaldescription+\"Dropdown#\";}\r\n    }\r\n  \r\n    this.setState({ans, options, addOptionFields, addOptionFieldsError, description: finaldescription});\r\n  }\r\n\r\n  onAddDropdown = () => {\r\n        let {description, ans, options, addOptionFields, addOptionFieldsError} = this.state;\r\n        let length = this.state.options.length;\r\n        description = description + \" #\"+(length+1)+\" Dropdown#\";\r\n        ans[length]=0;\r\n        options[length]=\"\";\r\n        addOptionFields[length]=\"\";\r\n        addOptionFieldsError[length]=\"\";\r\n        this.setState({description, ans, options, addOptionFields, addOptionFieldsError});\r\n  }\r\n\r\n  renderAddDropdownSection = (item, index) => {\r\n    const optionArray = item.split(\",\"); //1,2,3\r\n    return (\r\n      <div style={{textAlign: \"center\"}} className=\"col-11 col-sm-4 offset-sm-1 dropdown-container-style\">\r\n        <div id=\"box\">\r\n          <Button onClick={()=>{this.onDeleteDropDown(index);}} type=\"text\" id=\"icon-delete-dropdown\">\r\n            <span>\r\n              <CloseCircleTwoTone\r\n                style={{ fontSize: 20 }}\r\n                twoToneColor=\"#eb2f96\"\r\n              />\r\n            </span>\r\n          </Button>\r\n        </div>\r\n        {/* input field and add button */}\r\n        <h5 style={{margin : 7}}>Dropdown #{index+1}</h5>\r\n        <div\r\n          style={{ marginTop: 10 }}\r\n          className=\"row no-gutters enter-option-value-container\"\r\n        >\r\n          <div className=\"enter-option-value-input\">\r\n            <Input\r\n              value={this.state.addOptionFields[index]}\r\n              onChange={(e) => this.onEnterOptionValue(index, e)}\r\n              placeholder=\"Enter Option Value to Add\"\r\n            />\r\n          </div>\r\n          <div className=\"enter-option-value-add-btn\">\r\n            <Button\r\n              onClick={() => {\r\n                this.onAddOptionValueBtn(index);\r\n              }}\r\n              type=\"primary\"\r\n            >\r\n              <span>\r\n                <PlusOutlined\r\n                  style={{\r\n                    color: \"white\",\r\n                    verticalAlign: \"baseline\",\r\n                    fontSize: 18,\r\n                  }}\r\n                />\r\n              </span>\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        {/* error row */}\r\n        <div className=\"row no-gutters\">\r\n          <p style={{ color: ERROR_COLOR }}>\r\n            {this.state.addOptionFieldsError[index]}\r\n          </p>\r\n        </div>\r\n        {/* List of options */}\r\n\r\n        {this.state.options[index] !== \"\"\r\n          ? optionArray.map((item, optionIndex) => {\r\n              let checked = false;\r\n              if (optionIndex === this.state.ans[0]) {\r\n                checked = true;\r\n              }\r\n              return (\r\n                <div className=\"row \">\r\n                  <div className=\"checkbox-div\">\r\n                    <Button type=\"text\">\r\n                      <Checkbox\r\n                        checked={checked}\r\n                        onChange={(e) => {\r\n                          this.onChangeCheckedOptionValue(index, optionIndex);\r\n                        }}\r\n                      />\r\n                    </Button>\r\n                  </div>\r\n                  <div className=\"option-value-div\">\r\n                    <Input\r\n                      value={item}\r\n                      onChange={(e) => {\r\n                        this.onOptionChangeValue(e, index, optionIndex);\r\n                      }}\r\n                      placeholder=\"Option Value\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"option-value-delete-div\">\r\n                    <Button\r\n                      onClick={() => {\r\n                        this.onDeleteOptionValue(index, optionIndex);\r\n                      }}\r\n                    >\r\n                      <span>\r\n                        <DeleteTwoTone\r\n                          twoToneColor=\"#eb2f96\"\r\n                          style={{ verticalAlign: \"baseline\" }}\r\n                        />{\" \"}\r\n                      </span>\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          : null}\r\n      </div>\r\n    );\r\n  };\r\n  render() {\r\n    // console.log(this.state.ans);\r\n    return (\r\n      <>\r\n        <div>\r\n          {/* <h1>Select from Dropdown</h1> */}\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n            <TextArea\r\n              placeholder=\"Enter Your Question\"\r\n              value={this.state.description}\r\n              onChange={this.onChangeDescription}\r\n              rows={4}\r\n            />\r\n          </div>\r\n          <div className=\"col-12 col-sm-10 offset-sm-1\">\r\n            <p style={{ color: ERROR_COLOR }}>\r\n                {this.state.descriptionError}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n            <div  className=\"col-12 col-sm-10 offset-sm-1\">\r\n                <div >\r\n                <Button onClick={()=>this.onAddDropdown()} type=\"primary\" style={{position: \"absolute\", right :13}}>Add Dropdown</Button>\r\n                </div>\r\n                \r\n            </div>\r\n        </div>\r\n        <br/><br/>\r\n        <div className=\"row\">\r\n          {this.state.options.map((item, index) => {\r\n            return <>{this.renderAddDropdownSection(item, index)}</>;\r\n          })}\r\n        </div>\r\n        <AddQuestionFooter\r\n        type= \"Add Question\"\r\n          handleCancel={this.props.handleCancel}\r\n          handleOk={this.onAddQuestion}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n","/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Schemas/BlanksSchema.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/AddQuestionFooter.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Schemas/Mcqs.js",[],"/home/acer/Documents/reactJs/YMDtutor-LMS-/src/components/Categories/Multiple Choice/EditMultipleChoice.js",[],{"ruleId":"248","replacedBy":"249"},{"ruleId":"250","replacedBy":"251"},{"ruleId":"252","severity":1,"message":"253","line":93,"column":69,"nodeType":"254","messageId":"255","endLine":93,"endColumn":71},{"ruleId":"256","severity":1,"message":"257","line":5,"column":8,"nodeType":"258","messageId":"259","endLine":5,"endColumn":17},{"ruleId":"252","severity":1,"message":"253","line":25,"column":69,"nodeType":"254","messageId":"255","endLine":25,"endColumn":71},{"ruleId":"252","severity":1,"message":"253","line":101,"column":69,"nodeType":"254","messageId":"255","endLine":101,"endColumn":71},{"ruleId":"256","severity":1,"message":"260","line":7,"column":5,"nodeType":"258","messageId":"259","endLine":7,"endColumn":8},{"ruleId":"256","severity":1,"message":"261","line":8,"column":5,"nodeType":"258","messageId":"259","endLine":8,"endColumn":12},{"ruleId":"256","severity":1,"message":"262","line":9,"column":5,"nodeType":"258","messageId":"259","endLine":9,"endColumn":12},{"ruleId":"256","severity":1,"message":"263","line":10,"column":5,"nodeType":"258","messageId":"259","endLine":10,"endColumn":25},{"ruleId":"256","severity":1,"message":"264","line":11,"column":5,"nodeType":"258","messageId":"259","endLine":11,"endColumn":19},{"ruleId":"256","severity":1,"message":"265","line":12,"column":5,"nodeType":"258","messageId":"259","endLine":12,"endColumn":17},{"ruleId":"256","severity":1,"message":"266","line":13,"column":5,"nodeType":"258","messageId":"259","endLine":13,"endColumn":17},{"ruleId":"256","severity":1,"message":"267","line":14,"column":5,"nodeType":"258","messageId":"259","endLine":14,"endColumn":15},{"ruleId":"256","severity":1,"message":"268","line":2,"column":9,"nodeType":"258","messageId":"259","endLine":2,"endColumn":14},{"ruleId":"256","severity":1,"message":"269","line":3,"column":10,"nodeType":"258","messageId":"259","endLine":3,"endColumn":21},{"ruleId":"256","severity":1,"message":"270","line":3,"column":23,"nodeType":"258","messageId":"259","endLine":3,"endColumn":36},{"ruleId":"256","severity":1,"message":"271","line":4,"column":8,"nodeType":"258","messageId":"259","endLine":4,"endColumn":20},{"ruleId":"256","severity":1,"message":"270","line":3,"column":10,"nodeType":"258","messageId":"259","endLine":3,"endColumn":23},{"ruleId":"256","severity":1,"message":"269","line":3,"column":25,"nodeType":"258","messageId":"259","endLine":3,"endColumn":36},{"ruleId":"256","severity":1,"message":"272","line":25,"column":9,"nodeType":"258","messageId":"259","endLine":25,"endColumn":18},{"ruleId":"256","severity":1,"message":"273","line":36,"column":9,"nodeType":"258","messageId":"259","endLine":36,"endColumn":17},{"ruleId":"256","severity":1,"message":"274","line":57,"column":9,"nodeType":"258","messageId":"259","endLine":57,"endColumn":24},{"ruleId":"252","severity":1,"message":"253","line":61,"column":44,"nodeType":"254","messageId":"255","endLine":61,"endColumn":46},{"ruleId":"256","severity":1,"message":"275","line":4,"column":8,"nodeType":"258","messageId":"259","endLine":4,"endColumn":26},{"ruleId":"276","severity":1,"message":"277","line":49,"column":29,"nodeType":"278","endLine":49,"endColumn":96},{"ruleId":"256","severity":1,"message":"279","line":4,"column":9,"nodeType":"258","messageId":"259","endLine":4,"endColumn":28},{"ruleId":"252","severity":1,"message":"253","line":44,"column":44,"nodeType":"254","messageId":"255","endLine":44,"endColumn":46},{"ruleId":"256","severity":1,"message":"280","line":2,"column":10,"nodeType":"258","messageId":"259","endLine":2,"endColumn":15},{"ruleId":"256","severity":1,"message":"281","line":2,"column":44,"nodeType":"258","messageId":"259","endLine":2,"endColumn":47},{"ruleId":"256","severity":1,"message":"282","line":2,"column":17,"nodeType":"258","messageId":"259","endLine":2,"endColumn":21},{"ruleId":"256","severity":1,"message":"283","line":1,"column":26,"nodeType":"258","messageId":"259","endLine":1,"endColumn":35},{"ruleId":"256","severity":1,"message":"284","line":85,"column":9,"nodeType":"258","messageId":"259","endLine":85,"endColumn":12},{"ruleId":"256","severity":1,"message":"285","line":172,"column":22,"nodeType":"258","messageId":"259","endLine":172,"endColumn":27},{"ruleId":"256","severity":1,"message":"286","line":172,"column":38,"nodeType":"258","messageId":"259","endLine":172,"endColumn":42},{"ruleId":"256","severity":1,"message":"287","line":3,"column":7,"nodeType":"258","messageId":"259","endLine":3,"endColumn":21},{"ruleId":"248","replacedBy":"288"},{"ruleId":"250","replacedBy":"289"},{"ruleId":"256","severity":1,"message":"284","line":83,"column":9,"nodeType":"258","messageId":"259","endLine":83,"endColumn":12},{"ruleId":"256","severity":1,"message":"285","line":170,"column":22,"nodeType":"258","messageId":"259","endLine":170,"endColumn":27},{"ruleId":"256","severity":1,"message":"286","line":170,"column":38,"nodeType":"258","messageId":"259","endLine":170,"endColumn":42},"no-native-reassign",["290"],"no-negated-in-lhs",["291"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-unused-vars","'Countdown' is defined but never used.","Identifier","unusedVar","'Nav' is defined but never used.","'NavItem' is defined but never used.","'NavLink' is defined but never used.","'UncontrolledDropdown' is defined but never used.","'DropdownToggle' is defined but never used.","'DropdownMenu' is defined but never used.","'DropdownItem' is defined but never used.","'NavbarText' is defined but never used.","'Modal' is defined but never used.","'EditTwoTone' is defined but never used.","'DeleteTwoTone' is defined but never used.","'EditDropDown' is defined but never used.","'showModal' is assigned a value but never used.","'onDelete' is assigned a value but never used.","'makeDescription' is assigned a value but never used.","'EditMultipleChoice' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'EditFillInTheBlanks' is defined but never used.","'Radio' is defined but never used.","'Col' is defined but never used.","'List' is defined but never used.","'useEffect' is defined but never used.","'del' is assigned a value but never used.","'first' is assigned a value but never used.","'skip' is assigned a value but never used.","'formItemLayout' is assigned a value but never used.",["290"],["291"],"no-global-assign","no-unsafe-negation"]